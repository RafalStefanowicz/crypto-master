{"version":3,"sources":["constants/INITIAL_WALLET_USD.ts","components/layouts/Investments/InvestmentSwitcher/SwitchButtons/switchButtonsStyle.ts","components/layouts/Investments/InvestmentSwitcher/SwitchButtons/SwitchButtons.tsx","redux/actions/modalActions.ts","firebase/withFirebase.tsx","types/MODAL_TYPES.ts","utility/numberFormats.ts","styles/GlobalStyles.ts","types/NAV_LINKS.ts","components/Nav/NavList/navListStyles.ts","components/Nav/NavList/NavListContainer.tsx","components/Nav/NavList/NavList.tsx","components/Nav/navStyles.ts","components/Nav/Nav.tsx","components/Page/Page.tsx","components/App/appStyles.ts","components/Modals/Modal/Modal.tsx","components/AuthButtons/AuthButton/AuthButton.tsx","components/AuthButtons/ProviderLogIn/ProviderLogIn.tsx","components/AuthButtons/FacebookLogIn/FacebookLogIn.tsx","components/AuthButtons/GoogleLogIn/GoogleLogIn.tsx","components/Form/JoinForm/JoinForm.tsx","types/FIELDS_NAMES.ts","components/Form/SignUpForm/SignUpForm.tsx","types/JOIN_FORM_TYPES.ts","components/Form/SignInForm/SignInForm.tsx","components/Form/ResetPasswordForm/ResetPasswordForm.tsx","components/Modals/JoinModal/JoinSwitchButtons/JoinSwitchButtons.tsx","components/Modals/JoinModal/ForgotPasswordButton/ForgotPasswordButton.tsx","components/Modals/JoinModal/JoinModal.tsx","components/Modals/TransactionModalLogic/TransactionModal/TransactionModal.tsx","utility/getInvestmentAfterTransaction.ts","components/Modals/TransactionModalLogic/TransactionModalLogic.tsx","components/Modals/AlertModal/AltertModal.tsx","components/Modals/ModalRoot/ModalRoot.tsx","keys/keys.ts","api/cryptoCompareApi.ts","utility/fetchCryptos.ts","api/CryptoListener.tsx","redux/actions/fetchCryptosAction.ts","constants/FETCH_CRYPTO_TIME.ts","firebase/FirebaseListeners.tsx","redux/actions/setIsLogIn.ts","redux/actions/addUserNames.ts","redux/reducers/modal.ts","redux/reducers/index.ts","redux/reducers/isLoggedIn.ts","redux/reducers/cryptos.ts","redux/reducers/userNames.ts","redux/reducers/wallet.ts","redux/store/store.ts","firebase/Firebase.ts","utility/createInvestmentObject.ts","firebase/FirebaseOperations.ts","index.tsx","components/App/App.tsx","utility/validate.ts","utility/isProperLength.ts","firebase/FirebaseContext.ts","utility/getUniqueUserName.ts","components/layouts/Stock/stockStyles.ts","components/TradeLogic/CryptoList/CryptoItemForm/CryptoItemForm.tsx","components/TradeLogic/CryptoList/CryptoList.tsx","components/TradeLogic/TradeLogic.tsx","utility/getAcquisition.ts","utility/createNewWallet.tsx","utility/handleTransactionInModalsApprove.ts","constants/cryptoIcons.ts","types/ROUTES.ts","styles/media.ts","types/CRYPTO_SYMBOLS.ts","types/ACTION_TYPES.ts","styles/theme.ts","routeConditions/renderAlternative.tsx"],"names":["INITIAL_WALLET_USD","StyledButtonsWrapper","styled","div","StyledSwitchButton","button","isActive","theme","css","color","green","SwitchButtons","leftActive","changeActive","leftText","rightText","onClick","showModal","modal","type","ACTION_TYPES","SHOW_MODAL","payload","hideModal","HIDE_MODAL","withFirebase","Component","props","Consumer","firebase","MODAL_TYPES","getCurrencyFormat","number","Math","floor","getCryptoFormat","NAV_LINKS","GlobalStyles","createGlobalStyle","StyledNavList","ul","StyledNavItem","li","_NavListContainer","renderAlternative","to","ROUTES","STOCK","RANK","INVESTMENTS","ACCOUNT","NavListContainer","connect","state","isLoggedIn","StyledNav","nav","Nav","CRYTPO_MASTER","Home","lazy","StockContainer","RankingDataHandler","InvestmentsDataHandler","AccountLogic","Page","fallback","exact","component","path","INVESTMENTS_PARAMS","StyledMain","main","StyledMainInner","element","document","getElementById","ReactModal","setAppElement","Modal","children","isOpen","onRequestClose","AuthButton","handleLogIn","ProviderLogIn","userNames","doCreateUserWithProvider","renderIcon","then","catch","error","alert","message","FacebookLogIn","doCreateUserWithFacebook","icon","faFacebookF","GoogleLogIn","doCreateUserWithGoogle","faGoogle","FIELDS_NAME","JoinForm","fields","handleSubmit","validate","initialValues","forEach","field","name","onSubmit","values","a","setSubmitting","isSubmitting","map","key","disabled","JOIN_FORM_TYPES","SignUpFields","USER_NAME","EMAIL","PASSWORD","SignUpForm","compose","signUpValidate","doCreateUser","buttonText","SignInFields","SignInForm","signInValidate","doSignIn","ResetPasswordFields","ResetPasswordForm","resetPasswordValidate","email","doPasswordReset","JoinSwitchButtons","handleSignUp","ForgotPasswordButton","setResetPassword","JoinModal","useState","LOG_IN","form","setForm","REMIND_PASSWORD","SIGN_UP","renderForm","TransactionModal","timeLeft","transactionType","cryptoAmount","cryptoSymbol","usdAmount","fee","handleAccept","getInvestmentAfterTransaction","investments","investmentsAfterTransaction","JSON","parse","stringify","completedInvestments","completed","currentInvestments","current","TransactionType","buy","Date","now","buyPrice","sell","times","Object","keys","sort","amount","sellTime","i","buyCryptoAmount","sellPrice","roi","sellCryptoAmount","buyTime","TransactionModalLogic","newWallet","setTimeLeft","useEffect","listener","setInterval","clearInterval","userId","getUserId","getInvestments","investmentsDb","set","walletDb","AlertModal","alertText","ModalRoot","modalType","JOIN","TRANSACTION","modalProps","ALERT","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","cryptoList","CRYPTO_SYMBOLS","join","get20CryptosURL","fetchCryptos","fetch","response","json","data","cryptos","_mapValues","RAW","crypto","PRICE","USD","console","log","CryptoListener","fetchCryptosAction","dispatch","FETCH_CRYPTOS","FirebaseListeners","setIsLogIn","isLogIn","SET_LOG_IN","addUserNames","ADD_USER_NAMES","auth","onAuthStateChanged","user","userNamesDb","on","snapshot","users","val","off","INITIAL_MODAL_STATE","INITIAL","reducers","combineReducers","action","wallet","SET_WALLET","store","createStore","composeWithDevTools","applyMiddleware","thunk","Firebase","db","googleProvider","facebookProvider","currentUser","uid","doSignUp","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","sendPasswordResetEmail","doSignInWithGoogle","signInWithPopup","doSignInWithFacebook","doChangePassword","currentPassword","newPassword","doReauthenticateUser","updatePassword","Promise","reject","userEmail","credential","EmailAuthProvider","reauthenticateWithCredential","ref","personalDb","usersDb","this","initializeApp","GoogleAuthProvider","FacebookAuthProvider","database","createInvestmentsObject","FirebaseOperations","addUserToDb","userName","createdBy","update","userCredential","createUserWithProvider","signInWithProvider","userInfo","additionalUserInfo","displayName","isNewUser","uniqueName","getUniqueUserName","providerId","snapShot","once","ReactDOM","render","FirebaseContext","Provider","value","string","errors","uniqueUserName","isProperNameLength","length","split","find","part","test","changePasswordValidate","React","createContext","randomId","random","StyledStockWrapper","device","mobileL","StyledWalletWrapper","StyledTradeWrapper","StyledStockLabel","h1","CryptoItemForm","memo","handleTransaction","handleInputChange","cryptoIcon","price","change24hour","inputValue","acqusition","style","width","height","src","alt","placeholder","onChange","prevPrice","prevInpupValue","nextInpupValue","CryptoList","items","symbols","selectedCrypto","FROMSYMBOL","CHANGEPCT24HOUR","isSelectedCrypto","cryptoIcons","toFixed","TradeLogic","setTransactionType","setInputValue","getAcquisition","Number","isBuyActive","cryptosForSell","prop","getCryptosForSell","event","currentTarget","e","preventDefault","usd","createNewWallet","handleTransactionInModalsApprove","BTC","ETH","XRP","LTC","BCH","EOS","BNB","BSV","XLM","ADA","TRX","XMR","DASH","MIOTA","ONT","ETC","NEO","XTZ","XEM","MKR","size","mobileS","mobileM","tablet","laptop","laptopL","desktop","desktopL","ColorType","red","navyBlue","Alternative","otherProps"],"mappings":"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","file":"static/js/main.b3db7187.chunk.js","sourcesContent":["export const INITIAL_WALLET_USD = 10000;\r\n","import styled, { css } from \"styled-components\";\r\nimport { ThemeI } from \"../../../../../styles/theme\";\r\n\r\nexport const StyledButtonsWrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\ninterface StyledSwitchButtonProps {\r\n  isActive: boolean;\r\n  theme: ThemeI;\r\n}\r\n\r\nexport const StyledSwitchButton = styled.button<StyledSwitchButtonProps>`\r\n  flex: 1;\r\n  font-size: 20px;\r\n  border: 2px solid gray;\r\n  color: gray;\r\n  padding: 4px 0;\r\n  text-transform: uppercase;\r\n  letter-spacing: 3px;\r\n  font-weight: bold;\r\n  margin: 1px;\r\n  ${({ isActive, theme }) =>\r\n    isActive &&\r\n    css`\r\n      border: 2px solid ${theme.color.green};\r\n      color: ${theme.color.green};\r\n    `};\r\n\r\n  ${({ isActive }) =>\r\n    !isActive &&\r\n    css`\r\n      :hover {\r\n        border: 2px solid black;\r\n        color: black;\r\n      }\r\n    `};\r\n`;\r\n","import React from \"react\";\r\nimport { StyledButtonsWrapper, StyledSwitchButton } from \"./switchButtonsStyle\";\r\n\r\ninterface SwitchButtonsProps {\r\n  leftActive: boolean;\r\n  changeActive: (leftActive: boolean) => () => void;\r\n  leftText: string;\r\n  rightText: string;\r\n}\r\nexport const SwitchButtons = ({\r\n  leftActive,\r\n  changeActive,\r\n  leftText,\r\n  rightText\r\n}: SwitchButtonsProps) => {\r\n  return (\r\n    <StyledButtonsWrapper>\r\n      <StyledSwitchButton onClick={changeActive(true)} isActive={leftActive}>\r\n        {leftText}\r\n      </StyledSwitchButton>\r\n      <StyledSwitchButton onClick={changeActive(false)} isActive={!leftActive}>\r\n        {rightText}\r\n      </StyledSwitchButton>\r\n    </StyledButtonsWrapper>\r\n  );\r\n};\r\n","import { IModal } from \"../reducers/modal\";\r\nimport { ACTION_TYPES } from \"../../types/ACTION_TYPES\";\r\n\r\nexport interface ShowModalAction {\r\n  type: ACTION_TYPES.SHOW_MODAL;\r\n  payload: IModal;\r\n}\r\n\r\nexport interface HideModalAction {\r\n  type: ACTION_TYPES.HIDE_MODAL;\r\n}\r\n\r\nexport const showModal = (modal: IModal): ShowModalAction => ({\r\n  type: ACTION_TYPES.SHOW_MODAL,\r\n  payload: modal\r\n});\r\n\r\nexport const hideModal = (): HideModalAction => ({\r\n  type: ACTION_TYPES.HIDE_MODAL\r\n});\r\n","import React from \"react\";\r\nimport { Subtract } from \"utility-types\";\r\n\r\nimport { Firebase } from \"./Firebase\";\r\nimport { FirebaseContext } from \"./FirebaseContext\";\r\n\r\nexport interface WithFirebaseProps {\r\n  firebase: Firebase;\r\n}\r\n\r\nexport const withFirebase = <P extends WithFirebaseProps>(\r\n  Component: React.FC<P>\r\n) => (props: Subtract<P, WithFirebaseProps>) => {\r\n  return (\r\n    <FirebaseContext.Consumer>\r\n      {firebase => <Component {...(props as P)} firebase={firebase} />}\r\n    </FirebaseContext.Consumer>\r\n  );\r\n};\r\n","export enum MODAL_TYPES {\r\n  INITIAL = \"\",\r\n  JOIN = \"join\",\r\n  PASSWORD_REMIND = \"passwordRemind\",\r\n  TRANSACTION = \"transaction\",\r\n  ALERT = \"alert\"\r\n}\r\n","export const getCurrencyFormat = (number: number) =>\r\n  Math.floor(number * 100) / 100;\r\n\r\nexport const getCryptoFormat = (number: number) =>\r\n  Math.floor(number * 10000) / 10000;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Lato:400,700&display=swap');\r\n  \r\n  * {\r\n    margin: 0;\r\n    padding:0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n\r\n  li {\r\n    list-style-type: none;\r\n  } \r\n\r\n  button {\r\n    background-color: white;\r\n    outline: 0;\r\n  }\r\n\r\n  button:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  input, textarea, button {\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n  }\r\n`;\r\n","export enum NAV_LINKS {\r\n  CRYTPO_MASTER = \"Crypto Master\",\r\n  STOCK = \"Stock\",\r\n  RANK = \"Ranking\",\r\n  INVESTMENTS = \"Investments\",\r\n  ACCOUNT = \"Account\"\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledNavList = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nexport const StyledNavItem = styled.li``;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { NavList } from \"./NavList\";\r\nimport { IStore } from \"../../../redux/reducers\";\r\n\r\nimport { renderAlternative } from \"../../../routeConditions/renderAlternative\";\r\n\r\nconst _NavListContainer = renderAlternative(() => null)(NavList);\r\n\r\nconst mapStateToProps = (state: IStore) => ({\r\n  renderAlternative: !state.isLoggedIn\r\n});\r\n\r\nexport const NavListContainer = connect(mapStateToProps)(_NavListContainer);\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { ROUTES, NAV_LINKS } from \"../../../types\";\r\nimport { StyledNavList, StyledNavItem } from \"./navListStyles\";\r\n\r\nexport const NavList = () => {\r\n  return (\r\n    <StyledNavList>\r\n      <StyledNavItem>\r\n        <NavLink to={ROUTES.STOCK}>{NAV_LINKS.STOCK}</NavLink>\r\n      </StyledNavItem>\r\n      <StyledNavItem>\r\n        <NavLink to={ROUTES.RANK}>{NAV_LINKS.RANK}</NavLink>\r\n      </StyledNavItem>\r\n      <StyledNavItem>\r\n        <NavLink to={ROUTES.INVESTMENTS}>{NAV_LINKS.INVESTMENTS}</NavLink>\r\n      </StyledNavItem>\r\n      <StyledNavItem>\r\n        <NavLink to={ROUTES.ACCOUNT}>{NAV_LINKS.ACCOUNT}</NavLink>\r\n      </StyledNavItem>\r\n    </StyledNavList>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { ThemeI } from \"../../styles/theme\";\r\n\r\ninterface StyledNavProps {\r\n  theme: ThemeI;\r\n}\r\nexport const StyledNav = styled.nav<StyledNavProps>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: ${({ theme }) => theme.color.green};\r\n  color: white;\r\n`;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { NavListContainer } from \"./NavList/NavListContainer\";\r\nimport { ROUTES, NAV_LINKS } from \"../../types\";\r\nimport { StyledNav } from \"./navStyles\";\r\n\r\nexport const Nav = () => {\r\n  return (\r\n    <StyledNav>\r\n      <NavLink to={ROUTES.CRYTPO_MASTER}>{NAV_LINKS.CRYTPO_MASTER}</NavLink>\r\n      <NavListContainer />\r\n    </StyledNav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { ROUTES } from \"../../types\";\r\nimport { IStore } from \"../../redux/reducers\";\r\nimport { IsLoggedInType } from \"../../redux/reducers/isLoggedIn\";\r\n\r\nconst Home = lazy(() => import(\"../layouts/Home/Home\"));\r\nconst StockContainer = lazy(() => import(\"../layouts/Stock/StockContainer\"));\r\nconst RankingDataHandler = lazy(() =>\r\n  import(\"../layouts/Ranking/RankingDataHandler\")\r\n);\r\nconst InvestmentsDataHandler = lazy(() =>\r\n  import(\"../layouts/Investments/InvestmentsDataHandler\")\r\n);\r\nconst AccountLogic = lazy(() => import(\"../layouts/Account/AccountLogic\"));\r\n\r\ninterface PageProps {\r\n  isLoggedIn: IsLoggedInType;\r\n}\r\n\r\nconst _Page = ({ isLoggedIn }: PageProps) => {\r\n  return (\r\n    <Switch>\r\n      <Suspense fallback={<></>}>\r\n        <Route exact component={Home} path={ROUTES.CRYTPO_MASTER} />\r\n        <Route\r\n          component={isLoggedIn === false ? Home : StockContainer}\r\n          path={ROUTES.STOCK}\r\n        />\r\n        <Route\r\n          component={isLoggedIn === false ? Home : AccountLogic}\r\n          path={ROUTES.ACCOUNT}\r\n        />\r\n        <Route\r\n          component={isLoggedIn === false ? Home : InvestmentsDataHandler}\r\n          path={ROUTES.INVESTMENTS_PARAMS}\r\n        />\r\n        <Route\r\n          component={isLoggedIn === false ? Home : RankingDataHandler}\r\n          path={ROUTES.RANK}\r\n        />\r\n      </Suspense>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: IStore) => ({ isLoggedIn: state.isLoggedIn });\r\n\r\nexport const Page = connect(mapStateToProps)(_Page);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n  max-width: 1200px;\r\n  margin: 40px auto;\r\n`;\r\n\r\nexport const StyledMainInner = styled.div`\r\n  margin: 0 8px;\r\n`;\r\n","import React from \"react\";\r\nimport ReactModal from \"react-modal\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { hideModal } from \"../../../redux/actions/modalActions\";\r\n\r\ninterface ModalProps {\r\n  children: JSX.Element;\r\n  hideModal: typeof hideModal;\r\n}\r\nconst element = document.getElementById(\"root\");\r\n\r\nelement && ReactModal.setAppElement(element);\r\n\r\nconst _Modal = ({ children, hideModal }: ModalProps) => {\r\n  return (\r\n    <div>\r\n      <ReactModal\r\n        isOpen={true}\r\n        onRequestClose={() => {\r\n          hideModal();\r\n        }}\r\n      >\r\n        <button\r\n          onClick={() => {\r\n            hideModal();\r\n          }}\r\n        >\r\n          X\r\n        </button>\r\n        {children}\r\n      </ReactModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Modal = connect(\r\n  null,\r\n  { hideModal }\r\n)(_Modal);\r\n","import React from \"react\";\r\n\r\ninterface AuthButtonProps {\r\n  children: JSX.Element;\r\n  handleLogIn: () => void;\r\n}\r\n\r\nexport const AuthButton = ({ children, handleLogIn }: AuthButtonProps) => {\r\n  return <button onClick={handleLogIn}>{children}</button>;\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { AuthButton } from \"../AuthButton/AuthButton\";\r\nimport { IStore } from \"../../../redux/reducers\";\r\nimport { UserNamesI } from \"../../../redux/reducers/userNames\";\r\nimport { hideModal } from \"../../../redux/actions/modalActions\";\r\n\r\ninterface ProviderLogInProps {\r\n  userNames: UserNamesI;\r\n  hideModal: typeof hideModal;\r\n  renderIcon: () => JSX.Element;\r\n  doCreateUserWithProvider: (\r\n    userNames: UserNamesI\r\n  ) => Promise<firebase.User | null>;\r\n}\r\n\r\nconst _ProviderLogIn = ({\r\n  userNames,\r\n  hideModal,\r\n  doCreateUserWithProvider,\r\n  renderIcon\r\n}: ProviderLogInProps) => {\r\n  const handleLogIn = () => {\r\n    doCreateUserWithProvider(userNames)\r\n      .then(() => {\r\n        hideModal();\r\n      })\r\n      .catch(error => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  return <AuthButton handleLogIn={handleLogIn}>{renderIcon()}</AuthButton>;\r\n};\r\n\r\nconst mapStateToProps = (state: IStore) => ({\r\n  userNames: state.userNames\r\n});\r\n\r\nexport const ProviderLogIn = connect(\r\n  mapStateToProps,\r\n  { hideModal }\r\n)(_ProviderLogIn);\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFacebookF } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nimport { FirebaseOperations } from \"../../../firebase/FirebaseOperations\";\r\nimport { withFirebase } from \"../../../firebase/withFirebase\";\r\nimport { ProviderLogIn } from \"../ProviderLogIn/ProviderLogIn\";\r\nimport { UserNamesI } from \"../../../redux/reducers/userNames\";\r\n\r\ninterface FacebookLogInProps {\r\n  firebase: FirebaseOperations;\r\n}\r\n\r\nconst _FacebookLogIn = ({ firebase }: FacebookLogInProps) => {\r\n  const doCreateUserWithFacebook = (userNames: UserNamesI) =>\r\n    firebase.doCreateUserWithFacebook(userNames);\r\n\r\n  const renderIcon = () => <FontAwesomeIcon icon={faFacebookF} />;\r\n  return (\r\n    <ProviderLogIn\r\n      doCreateUserWithProvider={doCreateUserWithFacebook}\r\n      renderIcon={renderIcon}\r\n    />\r\n  );\r\n};\r\n\r\nexport const FacebookLogIn = withFirebase(_FacebookLogIn);\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nimport { FirebaseOperations } from \"../../../firebase/FirebaseOperations\";\r\nimport { withFirebase } from \"../../../firebase/withFirebase\";\r\nimport { ProviderLogIn } from \"../ProviderLogIn/ProviderLogIn\";\r\nimport { UserNamesI } from \"../../../redux/reducers/userNames\";\r\n\r\ninterface GoogleLogInProps {\r\n  firebase: FirebaseOperations;\r\n}\r\n\r\nconst _GoogleLogIn = ({ firebase }: GoogleLogInProps) => {\r\n  const doCreateUserWithGoogle = (userNames: UserNamesI) =>\r\n    firebase.doCreateUserWithGoogle(userNames);\r\n\r\n  const renderIcon = () => <FontAwesomeIcon icon={faGoogle} />;\r\n  return (\r\n    <ProviderLogIn\r\n      doCreateUserWithProvider={doCreateUserWithGoogle}\r\n      renderIcon={renderIcon}\r\n    />\r\n  );\r\n};\r\n\r\nexport const GoogleLogIn = withFirebase(_GoogleLogIn);\r\n","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { FIELDS_NAME } from \"../../../types/FIELDS_NAMES\";\r\n\r\nimport { ValidationType } from \"../../../utility/validate\";\r\n\r\ninterface JoinFormProps {\r\n  fields: FieldsType;\r\n  handleSubmit: Function;\r\n  validate: ValidationType;\r\n  buttonText: string;\r\n}\r\ntype FieldsType = FieldI[];\r\n\r\ninterface FieldI {\r\n  type: String;\r\n  name: FIELDS_NAME;\r\n}\r\n\r\nexport const JoinForm = ({ fields, handleSubmit, validate }: JoinFormProps) => {\r\n  const initialValues: any = {};\r\n  fields.forEach(field => {\r\n    initialValues[field.name] = \"\";\r\n  });\r\n\r\n  const renderFields = () =>\r\n    fields.map(field => (\r\n      <div key={field.name}>\r\n        <Field type={field.type} name={field.name} />\r\n        <ErrorMessage name={field.name} component=\"div\" />\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ ...initialValues }}\r\n      validate={validate}\r\n      onSubmit={async (values, { setSubmitting }) => {\r\n        await handleSubmit(values);\r\n        setSubmitting(false);\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form>\r\n          {renderFields()}\r\n          <button type=\"submit\" disabled={isSubmitting}>\r\n            Submit\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","export enum FIELDS_NAME {\r\n  USER_NAME = \"userName\",\r\n  EMAIL = \"email\",\r\n  PASSWORD = \"password\"\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { JoinForm } from \"../JoinForm/JoinForm\";\r\nimport { withFirebase } from \"../../../firebase/withFirebase\";\r\nimport {\r\n  FirebaseOperations,\r\n  DoCreateUserI\r\n} from \"../../../firebase/FirebaseOperations\";\r\nimport { hideModal } from \"../../../redux/actions/modalActions\";\r\nimport { signUpValidate } from \"../../../utility/validate\";\r\nimport { FIELDS_NAME } from \"../../../types/FIELDS_NAMES\";\r\nimport { IStore } from \"../../../redux/reducers\";\r\nimport { UserNamesI } from \"../../../redux/reducers/userNames\";\r\n\r\ninterface SignUpFormProps {\r\n  firebase: FirebaseOperations;\r\n  hideModal: typeof hideModal;\r\n  userNames: UserNamesI;\r\n}\r\n\r\nconst SignUpFields = [\r\n  {\r\n    type: \"text\",\r\n    name: FIELDS_NAME.USER_NAME\r\n  },\r\n  {\r\n    type: \"email\",\r\n    name: FIELDS_NAME.EMAIL\r\n  },\r\n  {\r\n    type: \"password\",\r\n    name: FIELDS_NAME.PASSWORD\r\n  }\r\n];\r\n\r\nconst _SignUpForm = ({ firebase, hideModal, userNames }: SignUpFormProps) => {\r\n  const handleSignUp = (values: DoCreateUserI) => {\r\n    firebase\r\n      .doCreateUser(values)\r\n      .then(() => {\r\n        hideModal();\r\n      })\r\n      .catch(error => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n  const validate = signUpValidate(userNames);\r\n\r\n  return (\r\n    <div>\r\n      <JoinForm\r\n        fields={SignUpFields}\r\n        validate={validate}\r\n        handleSubmit={handleSignUp}\r\n        buttonText=\"Sign up\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: IStore) => ({ userNames: state.userNames });\r\n\r\nexport const SignUpForm = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    { hideModal }\r\n  ),\r\n  withFirebase\r\n)(_SignUpForm) as React.ReactType;\r\n","export enum JOIN_FORM_TYPES {\r\n  LOG_IN = \"logIn\",\r\n  SIGN_UP = \"signUp\",\r\n  REMIND_PASSWORD = \"RemindPassword\"\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { JoinForm } from \"../JoinForm/JoinForm\";\r\nimport { withFirebase } from \"../../../firebase/withFirebase\";\r\nimport { Firebase, DoSignInI } from \"../../../firebase/Firebase\";\r\nimport { hideModal } from \"../../../redux/actions/modalActions\";\r\nimport { signInValidate } from \"../../../utility/validate\";\r\nimport { FIELDS_NAME } from \"../../../types/FIELDS_NAMES\";\r\n\r\ninterface SignInFormProps {\r\n  firebase: Firebase;\r\n  hideModal: typeof hideModal;\r\n}\r\n\r\nconst SignInFields = [\r\n  {\r\n    type: \"email\",\r\n    name: FIELDS_NAME.EMAIL\r\n  },\r\n  {\r\n    type: \"password\",\r\n    name: FIELDS_NAME.PASSWORD\r\n  }\r\n];\r\n\r\nconst _SignInForm = ({ firebase, hideModal }: SignInFormProps) => {\r\n  const handleSignIn = (values: DoSignInI) => {\r\n    firebase\r\n      .doSignIn(values)\r\n      .then(() => {\r\n        hideModal();\r\n      })\r\n      .catch(error => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <JoinForm\r\n        fields={SignInFields}\r\n        validate={signInValidate}\r\n        handleSubmit={handleSignIn}\r\n        buttonText=\"Log in\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const SignInForm = compose(\r\n  connect(\r\n    null,\r\n    { hideModal }\r\n  ),\r\n  withFirebase\r\n)(_SignInForm) as React.ReactType<{\r\n  setResetPassword: () => void;\r\n}>;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { JoinForm } from \"../JoinForm/JoinForm\";\r\nimport { withFirebase } from \"../../../firebase/withFirebase\";\r\nimport { Firebase } from \"../../../firebase/Firebase\";\r\nimport { hideModal } from \"../../../redux/actions/modalActions\";\r\nimport { resetPasswordValidate } from \"../../../utility/validate\";\r\nimport { FIELDS_NAME } from \"../../../types/FIELDS_NAMES\";\r\n\r\ninterface ResetPasswordForm {\r\n  firebase: Firebase;\r\n  hideModal: typeof hideModal;\r\n}\r\n\r\nconst ResetPasswordFields = [\r\n  {\r\n    type: \"email\",\r\n    name: FIELDS_NAME.EMAIL\r\n  }\r\n];\r\n\r\nconst _ResetPasswordForm = ({ firebase, hideModal }: ResetPasswordForm) => {\r\n  const handlePasswordReset = ({ email }: { email: \"string\" }) => {\r\n    firebase\r\n      .doPasswordReset(email)\r\n      .then(() => {\r\n        alert(\"Email send\");\r\n        hideModal();\r\n      })\r\n      .catch(error => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Reset Password</p>\r\n      <JoinForm\r\n        fields={ResetPasswordFields}\r\n        validate={resetPasswordValidate}\r\n        handleSubmit={handlePasswordReset}\r\n        buttonText=\"Send\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ResetPasswordForm = compose(\r\n  connect(\r\n    null,\r\n    { hideModal }\r\n  ),\r\n  withFirebase\r\n)(_ResetPasswordForm) as React.ReactType;\r\n","import React from \"react\";\r\n\r\ninterface JoinSwitchButtonsProps {\r\n  handleLogIn: () => void;\r\n  handleSignUp: () => void;\r\n}\r\n\r\nexport const JoinSwitchButtons = ({\r\n  handleLogIn,\r\n  handleSignUp\r\n}: JoinSwitchButtonsProps) => {\r\n  return (\r\n    <div>\r\n      <button onClick={handleLogIn}>LOG IN</button>\r\n      <button onClick={handleSignUp}>SIGN UP</button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface ForgotPasswordButtonProps {\r\n  setResetPassword: () => void;\r\n}\r\n\r\nexport default function ForgotPasswordButton({\r\n  setResetPassword\r\n}: ForgotPasswordButtonProps) {\r\n  return <button onClick={setResetPassword}>Forgot Password</button>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Modal } from \"../Modal/Modal\";\r\n\r\nimport { FacebookLogIn } from \"../../AuthButtons/FacebookLogIn/FacebookLogIn\";\r\nimport { GoogleLogIn } from \"../../AuthButtons/GoogleLogIn/GoogleLogIn\";\r\nimport { SignUpForm } from \"../../Form/SignUpForm/SignUpForm\";\r\nimport { SignInForm } from \"../../Form/SignInForm/SignInForm\";\r\nimport { ResetPasswordForm } from \"../../Form/ResetPasswordForm/ResetPasswordForm\";\r\nimport { JOIN_FORM_TYPES } from \"../../../types/JOIN_FORM_TYPES\";\r\nimport { JoinSwitchButtons } from \"./JoinSwitchButtons/JoinSwitchButtons\";\r\nimport ForgotPasswordButton from \"./ForgotPasswordButton/ForgotPasswordButton\";\r\nexport const JoinModal = () => {\r\n  const [form, setForm] = useState<JOIN_FORM_TYPES>(JOIN_FORM_TYPES.LOG_IN);\r\n\r\n  const setResetPassword = () => {\r\n    setForm(JOIN_FORM_TYPES.REMIND_PASSWORD);\r\n  };\r\n\r\n  const renderForm = () => {\r\n    switch (form) {\r\n      case JOIN_FORM_TYPES.LOG_IN:\r\n        return <SignInForm setResetPassword={setResetPassword} />;\r\n\r\n      case JOIN_FORM_TYPES.SIGN_UP:\r\n        return <SignUpForm />;\r\n\r\n      case JOIN_FORM_TYPES.REMIND_PASSWORD:\r\n        return <ResetPasswordForm />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const handleLogIn = () => {\r\n    setForm(JOIN_FORM_TYPES.LOG_IN);\r\n  };\r\n  const handleSignUp = () => {\r\n    setForm(JOIN_FORM_TYPES.SIGN_UP);\r\n  };\r\n\r\n  return (\r\n    <Modal>\r\n      <>\r\n        <JoinSwitchButtons\r\n          handleLogIn={handleLogIn}\r\n          handleSignUp={handleSignUp}\r\n        />\r\n        <FacebookLogIn />\r\n        <GoogleLogIn />\r\n        {renderForm()}\r\n        {form !== JOIN_FORM_TYPES.REMIND_PASSWORD && (\r\n          <ForgotPasswordButton setResetPassword={setResetPassword} />\r\n        )}\r\n      </>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Modal } from \"../../Modal/Modal\";\r\nimport { TransactionType } from \"../../../TradeLogic/TradeLogic\";\r\n\r\ninterface TransactionModalProps {\r\n  transactionType: TransactionType;\r\n  cryptoAmount: number;\r\n  usdAmount: number;\r\n  cryptoSymbol: string;\r\n  fee: number;\r\n  timeLeft: number;\r\n  handleAccept: () => void;\r\n}\r\n\r\nexport const TransactionModal = ({\r\n  timeLeft,\r\n  transactionType,\r\n  cryptoAmount,\r\n  cryptoSymbol,\r\n  usdAmount,\r\n  fee,\r\n  handleAccept\r\n}: TransactionModalProps) => {\r\n  return (\r\n    <Modal>\r\n      <>\r\n        <h1>{timeLeft}</h1>\r\n        <span>{`Do you want to ${transactionType} `}</span>\r\n        <span>{cryptoAmount} </span>\r\n        <span>{cryptoSymbol} </span>\r\n        <span>for </span>\r\n        <span>{usdAmount} $ </span>\r\n        <span>?</span>\r\n        <p>{`Fee included: ${fee} $`}</p>\r\n        <button onClick={handleAccept}>{transactionType}</button>\r\n      </>\r\n    </Modal>\r\n  );\r\n};\r\n","import { TransactionType } from \"../components/TradeLogic/TradeLogic\";\r\nimport { InvestmentsI } from \"../types/InvestmentsInterfaces\";\r\n\r\ninterface GetInvestmentAfterTransactionProps {\r\n  transactionType: TransactionType;\r\n  investments: InvestmentsI;\r\n  cryptoSymbol: string;\r\n  cryptoAmount: number;\r\n  usdAmount: number;\r\n}\r\nexport const getInvestmentAfterTransaction = ({\r\n  transactionType,\r\n  investments,\r\n  cryptoSymbol,\r\n  cryptoAmount,\r\n  usdAmount\r\n}: GetInvestmentAfterTransactionProps) => {\r\n  const investmentsAfterTransaction = JSON.parse(JSON.stringify(investments));\r\n  //references\r\n  const completedInvestments =\r\n    investmentsAfterTransaction.completed[cryptoSymbol];\r\n  const currentInvestments = investmentsAfterTransaction.current[cryptoSymbol];\r\n\r\n  if (transactionType === TransactionType.buy) {\r\n    currentInvestments[Date.now()] = {\r\n      cryptoAmount,\r\n      buyPrice: Math.floor((usdAmount / cryptoAmount) * 100) / 100\r\n    };\r\n  }\r\n\r\n  if (transactionType === TransactionType.sell) {\r\n    const times = Object.keys(currentInvestments).sort();\r\n    //copy cryptoAmount\r\n    let amount = cryptoAmount;\r\n    let sellTime = Date.now();\r\n\r\n    for (let i = 0; amount > 0; i++) {\r\n      const buyCryptoAmount = currentInvestments[times[i]].cryptoAmount;\r\n      const buyPrice = currentInvestments[times[i]].buyPrice;\r\n\r\n      const sellPrice = usdAmount / cryptoAmount;\r\n\r\n      const roi = sellPrice / buyPrice;\r\n      let sellCryptoAmount = 0;\r\n\r\n      if (buyCryptoAmount > amount) {\r\n        sellCryptoAmount = amount;\r\n        currentInvestments[times[i]].cryptoAmount = buyCryptoAmount - amount;\r\n        amount -= buyCryptoAmount;\r\n      } else if (buyCryptoAmount <= amount) {\r\n        sellCryptoAmount = buyCryptoAmount;\r\n        currentInvestments[times[i]] = {};\r\n        amount -= buyCryptoAmount;\r\n      }\r\n\r\n      sellTime += 1;\r\n      completedInvestments[sellTime] = {\r\n        buyTime: times[i],\r\n        sellTime: sellTime,\r\n        sellCryptoAmount,\r\n        buyPrice,\r\n        sellPrice,\r\n        roi\r\n      };\r\n    }\r\n  }\r\n  return investmentsAfterTransaction;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { TransactionModal } from \"./TransactionModal/TransactionModal\";\r\nimport { hideModal } from \"../../../redux/actions/modalActions\";\r\nimport { WalletType } from \"../../../redux/reducers/wallet\";\r\nimport { FirebaseOperations } from \"../../../firebase/FirebaseOperations\";\r\nimport { withFirebase } from \"../../../firebase/withFirebase\";\r\nimport { getInvestmentAfterTransaction } from \"../../../utility/getInvestmentAfterTransaction\";\r\nimport { TransactionType } from \"../../TradeLogic/TradeLogic\";\r\nimport { InvestmentsI } from \"../../../types/InvestmentsInterfaces\";\r\n\r\ninterface TransactionModalLogicProps {\r\n  newWallet: WalletType;\r\n  transactionType: TransactionType;\r\n  cryptoAmount: number;\r\n  usdAmount: number;\r\n  cryptoSymbol: string;\r\n  fee: number;\r\n  firebase: FirebaseOperations;\r\n  hideModal: typeof hideModal;\r\n}\r\n\r\nconst _TransactionModalLogic = ({\r\n  newWallet,\r\n  transactionType,\r\n  cryptoAmount,\r\n  usdAmount,\r\n  fee,\r\n  cryptoSymbol,\r\n  firebase,\r\n  hideModal\r\n}: TransactionModalLogicProps) => {\r\n  // time for modal on screen\r\n  const [timeLeft, setTimeLeft] = useState(10);\r\n\r\n  // set counting\r\n  useEffect(() => {\r\n    const listener = setInterval(() => {\r\n      setTimeLeft(timeLeft => {\r\n        return timeLeft - 1;\r\n      });\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(listener);\r\n    };\r\n  }, []);\r\n\r\n  const handleAccept = async () => {\r\n    const userId = firebase.getUserId();\r\n\r\n    if (userId) {\r\n      const investments = await firebase.getInvestments(userId, cryptoSymbol);\r\n      const investmentsAfterTransaction: InvestmentsI = getInvestmentAfterTransaction(\r\n        {\r\n          transactionType,\r\n          investments,\r\n          cryptoSymbol,\r\n          cryptoAmount,\r\n          usdAmount\r\n        }\r\n      );\r\n      firebase.investmentsDb(userId).set(investmentsAfterTransaction);\r\n\r\n      firebase\r\n        .walletDb(userId)\r\n        .set(newWallet)\r\n        .then(() => {\r\n          hideModal();\r\n        });\r\n    }\r\n  };\r\n\r\n  if (timeLeft < 0) {\r\n    hideModal();\r\n  }\r\n\r\n  return (\r\n    <TransactionModal\r\n      timeLeft={timeLeft}\r\n      transactionType={transactionType}\r\n      cryptoAmount={cryptoAmount}\r\n      cryptoSymbol={cryptoSymbol}\r\n      usdAmount={usdAmount}\r\n      fee={fee}\r\n      handleAccept={handleAccept}\r\n    />\r\n  );\r\n};\r\n\r\nexport const TransactionModalLogic = compose(\r\n  withFirebase,\r\n  connect(\r\n    null,\r\n    { hideModal }\r\n  )\r\n)(_TransactionModalLogic) as React.ReactType;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Modal } from \"../Modal/Modal\";\r\nimport { hideModal } from \"../../../redux/actions/modalActions\";\r\n\r\ninterface AlertModalProps {\r\n  hideModal: typeof hideModal;\r\n  alertText: string;\r\n}\r\n\r\nconst _AlertModal = ({ hideModal, alertText }: AlertModalProps) => {\r\n  return (\r\n    <Modal>\r\n      <>\r\n        <h1>{alertText}</h1>\r\n        <button onClick={hideModal}>OK</button>\r\n      </>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const AlertModal = connect(\r\n  null,\r\n  { hideModal }\r\n)(_AlertModal);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { JoinModal } from \"../JoinModal/JoinModal\";\r\nimport { TransactionModalLogic } from \"../TransactionModalLogic/TransactionModalLogic\";\r\nimport { AlertModal } from \"../AlertModal/AltertModal\";\r\nimport { MODAL_TYPES } from \"../../../types/MODAL_TYPES\";\r\nimport { IStore } from \"../../../redux/reducers\";\r\nimport { IModal } from \"../../../redux/reducers/modal\";\r\nimport { IsLoggedInType } from \"../../../redux/reducers/isLoggedIn\";\r\n\r\ninterface ModalRootProps {\r\n  modal: IModal;\r\n  isLoggedIn: IsLoggedInType;\r\n}\r\n\r\nconst _ModalRoot = ({ modal, isLoggedIn }: ModalRootProps) => {\r\n  switch (modal.modalType) {\r\n    case MODAL_TYPES.JOIN:\r\n      if (isLoggedIn) return null;\r\n      return <JoinModal />;\r\n    case MODAL_TYPES.TRANSACTION:\r\n      return <TransactionModalLogic {...modal.modalProps} />;\r\n    case MODAL_TYPES.ALERT:\r\n      return <AlertModal {...modal.modalProps} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state: IStore): ModalRootProps => ({\r\n  modal: state.modal,\r\n  isLoggedIn: state.isLoggedIn\r\n});\r\n\r\nexport const ModalRoot = connect(mapStateToProps)(_ModalRoot);\r\n","export const CRYPTO_COMPARE_KEY =\r\n  \"ad379ce6de71e55f9a19f3d9cfa8b545858e120ec0575cd27ee44b5741eeaaca\";\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyAJcCSGUCkzPqQCD2wwBEOLY0hfUM-HwEA\",\r\n  authDomain: \"crypto-master-c79dc.firebaseapp.com\",\r\n  databaseURL: \"https://crypto-master-c79dc.firebaseio.com\",\r\n  projectId: \"crypto-master-c79dc\",\r\n  storageBucket: \"crypto-master-c79dc.appspot.com\",\r\n  messagingSenderId: \"35308545467\",\r\n  appId: \"1:35308545467:web:2413768fd29c604064d09e\"\r\n};\r\n","import { CRYPTO_COMPARE_KEY } from \"../keys/keys\";\r\n\r\nimport { CRYPTO_SYMBOLS } from \"../types/CRYPTO_SYMBOLS\";\r\n\r\nconst cryptoList = Object.keys(CRYPTO_SYMBOLS).join(\",\");\r\n\r\nexport const get20CryptosURL = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cryptoList}&tsyms=USD&api_key=${CRYPTO_COMPARE_KEY}`;\r\n","import _mapValues from \"lodash/mapValues\";\r\nimport { FetchedCryptosI } from \"../redux/reducers/cryptos\";\r\n\r\nimport { get20CryptosURL } from \"../api/cryptoCompareApi\";\r\n\r\nexport const fetchCryptos = async () => {\r\n  try {\r\n    const response = await fetch(get20CryptosURL);\r\n    const data = await response.json();\r\n    const cryptos: FetchedCryptosI = _mapValues(data.RAW, crypto => {\r\n      const PRICE = Math.floor(crypto.USD.PRICE * 100) / 100;\r\n      return {\r\n        ...crypto.USD,\r\n        PRICE\r\n      };\r\n    });\r\n    return cryptos;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { fetchCryptosAction } from \"../redux/actions/fetchCryptosAction\";\r\nimport { FETCH_CRYPTO_TIME } from \"../constants/FETCH_CRYPTO_TIME\";\r\n\r\ninterface CryptoListenerProps {\r\n  fetchCryptosAction: typeof fetchCryptosAction;\r\n}\r\nconst _CryptoListener = ({ fetchCryptosAction }: any) => {\r\n  useEffect(() => {\r\n    fetchCryptosAction();\r\n    const listener = setInterval(() => {\r\n      fetchCryptosAction();\r\n    }, FETCH_CRYPTO_TIME);\r\n\r\n    return () => {\r\n      clearInterval(listener);\r\n    };\r\n  }, [fetchCryptosAction]);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport const CryptoListener = connect(\r\n  null,\r\n  { fetchCryptosAction }\r\n)(_CryptoListener);\r\n","import { Dispatch } from \"redux\";\r\n\r\nimport { fetchCryptos } from \"../../utility/fetchCryptos\";\r\nimport { ACTION_TYPES } from \"../../types/ACTION_TYPES\";\r\nimport { CryptosI } from \"../../redux/reducers/cryptos\";\r\n\r\nexport interface FetchCryptosAction {\r\n  type: ACTION_TYPES.FETCH_CRYPTOS;\r\n  payload: CryptosI;\r\n}\r\n\r\nexport const fetchCryptosAction = () => async (dispatch: Dispatch) => {\r\n  const cryptos = await fetchCryptos();\r\n  if (cryptos) {\r\n    dispatch<FetchCryptosAction>({\r\n      type: ACTION_TYPES.FETCH_CRYPTOS,\r\n      payload: cryptos\r\n    });\r\n  }\r\n};\r\n","export const FETCH_CRYPTO_TIME = 10000;\r\n","import React, { useEffect } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { withFirebase } from \"./withFirebase\";\r\nimport { FirebaseOperations } from \"./FirebaseOperations\";\r\nimport { setIsLogIn } from \"../redux/actions/setIsLogIn\";\r\nimport { addUserNames } from \"../redux/actions/addUserNames\";\r\n\r\ninterface IFirebaseListener {\r\n  firebase: FirebaseOperations;\r\n  setIsLogIn: typeof setIsLogIn;\r\n  addUserNames: typeof addUserNames;\r\n}\r\n\r\nconst _FirebaseListener = ({\r\n  firebase,\r\n  setIsLogIn,\r\n  addUserNames\r\n}: IFirebaseListener) => {\r\n  useEffect(() => {\r\n    const listener = firebase.auth.onAuthStateChanged(user => {\r\n      setIsLogIn(!!user);\r\n    });\r\n    return () => {\r\n      listener();\r\n    };\r\n  }, [firebase.auth, setIsLogIn]);\r\n\r\n  useEffect(() => {\r\n    firebase.userNamesDb().on(\"value\", snapshot => {\r\n      const users = snapshot.val();\r\n      if (users) {\r\n        addUserNames(users);\r\n      }\r\n    });\r\n    return () => {\r\n      firebase.userNamesDb().off();\r\n    };\r\n  }, [firebase, addUserNames]);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport const FirebaseListeners = compose(\r\n  connect(\r\n    null,\r\n    { setIsLogIn, addUserNames }\r\n  ),\r\n  withFirebase\r\n)(_FirebaseListener) as React.ReactType;\r\n","import { ACTION_TYPES } from \"../../types/ACTION_TYPES\";\r\n\r\nexport interface ISetIsLogInAction {\r\n  type: ACTION_TYPES.SET_LOG_IN;\r\n  payload: boolean;\r\n}\r\n\r\nexport const setIsLogIn = (isLogIn: boolean): ISetIsLogInAction => ({\r\n  type: ACTION_TYPES.SET_LOG_IN,\r\n  payload: isLogIn\r\n});\r\n","import { UserNamesI } from \"../reducers/userNames\";\r\nimport { ACTION_TYPES } from \"../../types/ACTION_TYPES\";\r\n\r\nexport interface AddUSerNamesAction {\r\n  type: ACTION_TYPES.ADD_USER_NAMES;\r\n  payload: UserNamesI;\r\n}\r\n\r\nexport const addUserNames = (userNames: UserNamesI) => ({\r\n  type: ACTION_TYPES.ADD_USER_NAMES,\r\n  payload: userNames\r\n});\r\n","import { ACTION_TYPES, ActionType } from \"../../types/ACTION_TYPES\";\r\nimport { MODAL_TYPES } from \"../../types/MODAL_TYPES\";\r\n\r\nconst INITIAL_MODAL_STATE = {\r\n  modalType: MODAL_TYPES.INITIAL,\r\n  modalProps: {}\r\n};\r\n\r\nexport interface IModal {\r\n  modalType: MODAL_TYPES;\r\n  modalProps: any;\r\n}\r\n\r\nexport const modal = (\r\n  state: IModal = INITIAL_MODAL_STATE,\r\n  action: ActionType\r\n): IModal => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.SHOW_MODAL:\r\n      return { ...action.payload };\r\n    case ACTION_TYPES.HIDE_MODAL:\r\n      return INITIAL_MODAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { modal, IModal } from \"./modal\";\r\nimport { IsLoggedInType, isLoggedIn } from \"./isLoggedIn\";\r\nimport { CryptosI, cryptos } from \"./cryptos\";\r\nimport { userNames, UserNamesI } from \"./userNames\";\r\nimport { wallet, WalletType } from \"./wallet\";\r\n\r\nexport interface IStore {\r\n  modal: IModal;\r\n  isLoggedIn: IsLoggedInType;\r\n  cryptos: CryptosI;\r\n  userNames: UserNamesI;\r\n  wallet: WalletType;\r\n}\r\n\r\nexport const reducers = combineReducers<IStore>({\r\n  modal,\r\n  isLoggedIn,\r\n  cryptos,\r\n  userNames,\r\n  wallet\r\n});\r\n","import { ActionType, ACTION_TYPES } from \"../../types/ACTION_TYPES\";\r\n\r\nexport type IsLoggedInType = boolean | null;\r\n\r\nexport const isLoggedIn = (\r\n  state: IsLoggedInType = null,\r\n  action: ActionType\r\n): IsLoggedInType => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.SET_LOG_IN:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ACTION_TYPES, ActionType } from \"../../types/ACTION_TYPES\";\r\n\r\nexport interface CryptoI {\r\n  CHANGEPCT24HOUR: number;\r\n  FROMSYMBOL: string;\r\n  PRICE: number;\r\n}\r\n\r\nexport interface FetchedCryptosI {\r\n  [crypto: string]: CryptoI;\r\n}\r\n\r\nexport type CryptosI = FetchedCryptosI | null;\r\n\r\nexport const cryptos = (state: CryptosI = null, action: ActionType) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.FETCH_CRYPTOS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ACTION_TYPES, ActionType } from \"../../types/ACTION_TYPES\";\r\n\r\nexport interface UserNamesI {\r\n  [userName: string]: string;\r\n}\r\nexport const userNames = (state: UserNamesI = {}, action: ActionType) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.ADD_USER_NAMES:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ActionType, ACTION_TYPES } from \"../../types/ACTION_TYPES\";\r\n\r\nexport interface WalletI {\r\n  [key: string]: number;\r\n}\r\n\r\nexport type WalletType = WalletI | null;\r\n\r\nexport const wallet = (\r\n  state: WalletType = null,\r\n  action: ActionType\r\n): WalletType => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.SET_WALLET:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nimport { firebaseConfig } from \"../keys/keys\";\r\n\r\nexport interface DoSignUpI {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface DoSignInI {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport class Firebase {\r\n  firebase: firebase.app.App;\r\n  auth: firebase.auth.Auth;\r\n  db: firebase.database.Database;\r\n  googleProvider: firebase.auth.GoogleAuthProvider;\r\n  facebookProvider: firebase.auth.FacebookAuthProvider;\r\n\r\n  constructor() {\r\n    this.firebase = firebase.initializeApp(firebaseConfig);\r\n    this.googleProvider = new firebase.auth.GoogleAuthProvider();\r\n    this.facebookProvider = new firebase.auth.FacebookAuthProvider();\r\n    this.auth = this.firebase.auth();\r\n    this.db = this.firebase.database();\r\n  }\r\n\r\n  getUserId = () => {\r\n    if (this.auth.currentUser) {\r\n      return this.auth.currentUser.uid;\r\n    }\r\n  };\r\n\r\n  protected doSignUp = ({ email, password }: DoSignUpI) =>\r\n    this.auth.createUserWithEmailAndPassword(email, password);\r\n\r\n  doSignIn = ({ email, password }: DoSignInI) =>\r\n    this.auth.signInWithEmailAndPassword(email, password);\r\n\r\n  doPasswordReset = (email: string) => this.auth.sendPasswordResetEmail(email);\r\n\r\n  protected doSignInWithGoogle = () =>\r\n    this.auth.signInWithPopup(this.googleProvider);\r\n\r\n  protected doSignInWithFacebook = () =>\r\n    this.auth.signInWithPopup(this.facebookProvider);\r\n\r\n  doChangePassword = (currentPassword: string, newPassword: string) => {\r\n    const user = this.auth.currentUser;\r\n\r\n    if (user && user.email) {\r\n      return this.doReauthenticateUser(user, user.email, currentPassword)\r\n        .then(() => user.updatePassword(newPassword))\r\n        .catch(error => Promise.reject(error));\r\n    }\r\n    return user;\r\n  };\r\n\r\n  private doReauthenticateUser = (\r\n    user: firebase.User,\r\n    userEmail: string,\r\n    currentPassword: string\r\n  ) => {\r\n    const credential = firebase.auth.EmailAuthProvider.credential(\r\n      userEmail,\r\n      currentPassword\r\n    );\r\n    return user.reauthenticateWithCredential(credential);\r\n  };\r\n\r\n  walletDb = (userId: string) => this.db.ref(`users/${userId}/wallet`);\r\n\r\n  personalDb = (userId: string) => this.db.ref(`users/${userId}/personal`);\r\n\r\n  userNamesDb = () => this.db.ref(`usernames`);\r\n\r\n  investmentsDb = (userId: string) =>\r\n    this.db.ref(`users/${userId}/investments`);\r\n\r\n  usersDb = () => this.db.ref(\"users\");\r\n}\r\n","export const createInvestmentsObject = (\r\n  investments: any,\r\n  cryptoSymbol: string\r\n) => {\r\n  if (!investments) {\r\n    investments = {};\r\n  }\r\n  if (!investments.current) {\r\n    investments.current = {};\r\n  }\r\n  if (!investments.current[cryptoSymbol]) {\r\n    investments.current[cryptoSymbol] = {};\r\n  }\r\n  if (!investments.completed) {\r\n    investments.completed = {};\r\n  }\r\n  if (!investments.completed[cryptoSymbol]) {\r\n    investments.completed[cryptoSymbol] = {};\r\n  }\r\n\r\n  return investments;\r\n};\r\n","import { Firebase } from \"./Firebase\";\r\nimport { UserNamesI } from \"../redux/reducers/userNames\";\r\nimport { getUniqueUserName } from \"../utility/getUniqueUserName\";\r\nimport { createInvestmentsObject } from \"../utility/createInvestmentObject\";\r\nimport { INITIAL_WALLET_USD } from \"../constants/INITIAL_WALLET_USD\";\r\n\r\nexport interface AddUserToDbI {\r\n  userId: string;\r\n  userName: string;\r\n  email: string;\r\n  createdBy: string;\r\n}\r\n\r\nexport interface DoCreateUserI {\r\n  userName: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport class FirebaseOperations extends Firebase {\r\n  private addUserToDb = ({\r\n    userId,\r\n    userName,\r\n    email,\r\n    createdBy\r\n  }: AddUserToDbI) => {\r\n    this.personalDb(userId).set({\r\n      userName,\r\n      email,\r\n      createdBy\r\n    });\r\n\r\n    this.walletDb(userId).set({\r\n      USD: INITIAL_WALLET_USD\r\n    });\r\n\r\n    if (typeof userName == \"string\") {\r\n      this.userNamesDb().update({ [userName]: userId });\r\n    }\r\n  };\r\n\r\n  doCreateUser = ({ userName, email, password }: DoCreateUserI) =>\r\n    this.doSignUp({ email, password })\r\n      .then(userCredential => {\r\n        const user = userCredential.user;\r\n        if (user && user.email) {\r\n          this.addUserToDb({\r\n            userId: user.uid,\r\n            userName: userName,\r\n            email: user.email,\r\n            createdBy: \"firebase.com\"\r\n          });\r\n        }\r\n        return user;\r\n      })\r\n      .catch(error => {\r\n        return Promise.reject(error);\r\n      });\r\n\r\n  doCreateUserWithGoogle = (userNames: UserNamesI) =>\r\n    this.createUserWithProvider(this.doSignInWithGoogle, userNames);\r\n\r\n  doCreateUserWithFacebook = (userNames: UserNamesI) =>\r\n    this.createUserWithProvider(this.doSignInWithFacebook, userNames);\r\n\r\n  private createUserWithProvider = (\r\n    signInWithProvider: () => Promise<firebase.auth.UserCredential>,\r\n    userNames: UserNamesI\r\n  ) =>\r\n    signInWithProvider()\r\n      .then(userCredential => {\r\n        const user = userCredential.user;\r\n        const userInfo = userCredential.additionalUserInfo;\r\n        if (\r\n          user &&\r\n          user.displayName &&\r\n          user.email &&\r\n          userInfo &&\r\n          userInfo.isNewUser\r\n        ) {\r\n          const uniqueName = getUniqueUserName(user.displayName, userNames);\r\n          this.addUserToDb({\r\n            userId: user.uid,\r\n            userName: uniqueName,\r\n            email: user.email,\r\n            createdBy: userInfo.providerId\r\n          });\r\n        }\r\n        return user;\r\n      })\r\n      .catch(error => {\r\n        return Promise.reject(error);\r\n      });\r\n\r\n  getInvestments = async (userId: string, cryptoSymbol: string) => {\r\n    let snapShot = null;\r\n    await this.investmentsDb(userId).once(\"value\", snapshot => {\r\n      snapShot = snapshot.val();\r\n    });\r\n    return createInvestmentsObject(snapShot, cryptoSymbol);\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ThemeProvider } from \"styled-components\";\r\n\r\nimport { theme } from \"./styles/theme\";\r\nimport { GlobalStyles } from \"./styles/GlobalStyles\";\r\nimport { App } from \"./components/App/App\";\r\nimport { ModalRoot } from \"./components/Modals/ModalRoot/ModalRoot\";\r\nimport { CryptoListener } from \"./api/CryptoListener\";\r\nimport { FirebaseListeners } from \"./firebase/FirebaseListeners\";\r\nimport { FirebaseContext } from \"./firebase/FirebaseContext\";\r\nimport { store } from \"./redux/store/store\";\r\nimport { FirebaseOperations } from \"./firebase/FirebaseOperations\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <FirebaseContext.Provider value={new FirebaseOperations()}>\r\n          <GlobalStyles />\r\n          <CryptoListener />\r\n          <FirebaseListeners />\r\n          <ModalRoot />\r\n          <App />\r\n        </FirebaseContext.Provider>\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import React from \"react\";\n\nimport Nav from \"../Nav/Nav\";\nimport { Page } from \"../Page/Page\";\nimport { StyledMain, StyledMainInner } from \"./appStyles\";\n\nexport const App = () => {\n  return (\n    <>\n      <header>\n        <Nav></Nav>\n      </header>\n      <StyledMain>\n        <StyledMainInner>\n          <Page />\n        </StyledMainInner>\n      </StyledMain>\n    </>\n  );\n};\n","import { getUniqueUserName } from \"./getUniqueUserName\";\r\nimport { UserNamesI } from \"../redux/reducers/userNames\";\r\nimport { isProperLength } from \"./isProperLength\";\r\n\r\ninterface ISignUpValues {\r\n  userName: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface ISignUpErrors {\r\n  userName?: string;\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\ninterface ChangePasswordValuesI {\r\n  currentPassword: string;\r\n  newPassword: string;\r\n}\r\n\r\ninterface ChangePasswordErrors {\r\n  currentPassword?: string;\r\n  newPassword?: string;\r\n}\r\n\r\nexport type ValidationType =\r\n  | SignUpValidateType\r\n  | typeof signInValidate\r\n  | typeof resetPasswordValidate;\r\n\r\nexport type SignUpValidateType = (values: ISignUpValues) => ISignUpErrors;\r\n\r\nexport const signUpValidate = (userNames: UserNamesI): SignUpValidateType => (\r\n  values: ISignUpValues\r\n): ISignUpErrors => {\r\n  let errors: ISignUpErrors = {};\r\n  const userName = values.userName;\r\n  const uniqueUserName = getUniqueUserName(userName, userNames);\r\n  const isProperNameLength = isProperLength(userName);\r\n\r\n  if (!userName) {\r\n    errors.userName = \"Required\";\r\n  } else if (userName !== uniqueUserName) {\r\n    errors.userName = `The user name is already in use. We suggest ${uniqueUserName}`;\r\n  } else if (!isProperNameLength) {\r\n    errors.userName = `The user name is too long`;\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email format\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Required\";\r\n  } else if (!/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$/i.test(values.password)) {\r\n    errors.password =\r\n      \"Minimum six characters, at least one letter and one number\";\r\n  }\r\n  return errors;\r\n};\r\n\r\ninterface SignInValuesI {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignInErrorsI {\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\nexport const signInValidate = (values: SignInValuesI): SignInErrorsI => {\r\n  let errors: SignInErrorsI = {};\r\n  if (!values.email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email format\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Required\";\r\n  } else if (!/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$/i.test(values.password)) {\r\n    errors.password =\r\n      \"Minimum six characters, at least one letter and one number\";\r\n  }\r\n  return errors;\r\n};\r\n\r\ninterface ResetPasswordValuesI {\r\n  email: string;\r\n}\r\n\r\ninterface ResetPasswordErrorsI {\r\n  email?: string;\r\n}\r\n\r\nexport const resetPasswordValidate = (\r\n  values: ResetPasswordValuesI\r\n): ResetPasswordErrorsI => {\r\n  let errors: SignInErrorsI = {};\r\n  if (!values.email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email format\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const changePasswordValidate = (\r\n  values: ChangePasswordValuesI\r\n): ChangePasswordErrors => {\r\n  let errors: ChangePasswordErrors = {};\r\n  if (!values.currentPassword) {\r\n    errors.currentPassword = \"Required\";\r\n  }\r\n  if (!values.newPassword) {\r\n    errors.newPassword = \"Required\";\r\n  } else if (\r\n    !/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$/i.test(values.newPassword)\r\n  ) {\r\n    errors.newPassword =\r\n      \"Minimum six characters, at least one letter and one number\";\r\n  }\r\n  return errors;\r\n};\r\n","const MAX_USER_NAME_LENGTH = 24;\r\nconst MAX_INDIVIDUAL_PART = 12;\r\nexport const isProperLength = (string: string) => {\r\n  if (string.length > MAX_USER_NAME_LENGTH) return false;\r\n  return !string.split(\" \").find(part => part.length > MAX_INDIVIDUAL_PART);\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Firebase } from \"./Firebase\";\r\n\r\nexport const FirebaseContext = React.createContext<null | Firebase>(null);\r\n","import { UserNamesI } from \"../redux/reducers/userNames\";\r\n\r\ntype GetUniqueUserName = (userName: string, userNames: UserNamesI) => string;\r\n\r\nexport const getUniqueUserName: GetUniqueUserName = (userName, userNames) => {\r\n  if (!userNames[userName]) return userName;\r\n  let uniqueUserName = \"\";\r\n  do {\r\n    const randomId = Math.floor(Math.random() * 1000);\r\n    uniqueUserName = `${userName}_${randomId}`;\r\n    console.log(typeof userNames[uniqueUserName]);\r\n  } while (false);\r\n  return uniqueUserName;\r\n};\r\n","import styled from \"styled-components\";\r\nimport { device } from \"../../../styles/media\";\r\n\r\nexport const StyledStockWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n\r\n  @media ${device.mobileL} {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport const StyledWalletWrapper = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport const StyledTradeWrapper = styled.div`\r\n  flex: 4;\r\n`;\r\n\r\nexport const StyledStockLabel = styled.h1`\r\n  text-align: center;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { TransactionType } from \"../../TradeLogic\";\r\nimport { HandleInputChangeType } from \"../CryptoList\";\r\n\r\ninterface CryptoItemFormProps {\r\n  transactionType: TransactionType;\r\n  handleInputChange: HandleInputChangeType;\r\n  inputValue: string;\r\n  handleTransaction: (e: React.FormEvent) => void;\r\n  acqusition: number;\r\n  fee: number;\r\n  price: number;\r\n  cryptoSymbol: string;\r\n  cryptoIcon: string;\r\n  change24hour: string;\r\n}\r\n\r\nconst _CryptoItemForm = ({\r\n  handleTransaction,\r\n  handleInputChange,\r\n  cryptoIcon,\r\n  cryptoSymbol,\r\n  price,\r\n  change24hour,\r\n  inputValue,\r\n  transactionType,\r\n  acqusition,\r\n  fee\r\n}: CryptoItemFormProps) => {\r\n  return (\r\n    <form onSubmit={handleTransaction}>\r\n      <img\r\n        style={{ width: \"30px\", height: \"30px\" }}\r\n        src={cryptoIcon}\r\n        alt={cryptoIcon}\r\n      ></img>\r\n      <span>{`${cryptoSymbol} `}</span>\r\n      <span>{price} $</span>\r\n      <span> 24h: {change24hour}%</span>\r\n      <input\r\n        name={cryptoSymbol}\r\n        value={inputValue}\r\n        type=\"number\"\r\n        placeholder={\r\n          transactionType === TransactionType.buy\r\n            ? \"USD..\"\r\n            : `${cryptoSymbol}..`\r\n        }\r\n        onChange={handleInputChange}\r\n      />\r\n      {inputValue ? (\r\n        <>\r\n          <span>{`${acqusition} ${\r\n            transactionType === TransactionType.buy ? cryptoSymbol : \"usd\"\r\n          }`}</span>\r\n          <span> {fee}$ fee</span>\r\n          <button>{transactionType}</button>\r\n        </>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst propsAreEqual = (\r\n  { price: prevPrice, inputValue: prevInpupValue }: CryptoItemFormProps,\r\n  { inputValue: nextInpupValue, price: nextPrice }: CryptoItemFormProps\r\n) => prevPrice === nextPrice && prevInpupValue === nextInpupValue;\r\n\r\nexport const CryptoItemForm = React.memo(_CryptoItemForm, propsAreEqual);\r\n","import React from \"react\";\r\n\r\nimport { CryptoItemForm } from \"./CryptoItemForm/CryptoItemForm\";\r\nimport { cryptoIcons } from \"../../../constants/cryptoIcons\";\r\nimport { CRYPTO_SYMBOLS } from \"../../../types/CRYPTO_SYMBOLS\";\r\nimport { CryptosI } from \"../../../redux/reducers/cryptos\";\r\nimport { TransactionType } from \"../TradeLogic\";\r\nimport { InputValueType } from \"../TradeLogic\";\r\n\r\ninterface CryptoListProps {\r\n  cryptos: CryptosI;\r\n  transactionType: TransactionType;\r\n  handleInputChange: HandleInputChangeType;\r\n  inputValue: InputValueType;\r\n  handleTransaction: (e: React.FormEvent) => void;\r\n  acqusition: number;\r\n  fee: number;\r\n}\r\n\r\nexport type HandleInputChangeType = (\r\n  event: React.FormEvent<HTMLInputElement>\r\n) => void;\r\n\r\nexport const CryptoList = ({\r\n  cryptos,\r\n  transactionType,\r\n  handleInputChange,\r\n  inputValue,\r\n  handleTransaction,\r\n  acqusition,\r\n  fee\r\n}: CryptoListProps) => {\r\n  let items = null;\r\n\r\n  if (cryptos) {\r\n    const symbols = Object.keys(cryptos) as Array<keyof typeof CRYPTO_SYMBOLS>;\r\n    const selectedCrypto = Object.keys(inputValue)[0];\r\n\r\n    items = symbols.map(cryptoSymbol => {\r\n      const { FROMSYMBOL, PRICE, CHANGEPCT24HOUR } = cryptos[cryptoSymbol];\r\n      const isSelectedCrypto = selectedCrypto === FROMSYMBOL;\r\n\r\n      return (\r\n        <li key={FROMSYMBOL}>\r\n          <CryptoItemForm\r\n            handleTransaction={handleTransaction}\r\n            handleInputChange={handleInputChange}\r\n            cryptoIcon={cryptoIcons[cryptoSymbol]}\r\n            cryptoSymbol={FROMSYMBOL}\r\n            price={PRICE}\r\n            change24hour={CHANGEPCT24HOUR.toFixed(2)}\r\n            inputValue={isSelectedCrypto ? inputValue[FROMSYMBOL] : \"\"}\r\n            transactionType={transactionType}\r\n            acqusition={isSelectedCrypto ? acqusition : 0}\r\n            fee={isSelectedCrypto ? fee : 0}\r\n          />\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n  return <ul>{items}</ul>;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { CryptoList } from \"./CryptoList/CryptoList\";\r\nimport { WalletI } from \"../../redux/reducers/wallet\";\r\nimport { CryptosI, FetchedCryptosI } from \"../../redux/reducers/cryptos\";\r\nimport { HandleInputChangeType } from \"./CryptoList/CryptoList\";\r\nimport { MODAL_TYPES } from \"../../types/MODAL_TYPES\";\r\nimport { showModal, hideModal } from \"../../redux/actions/modalActions\";\r\nimport { createNewWallet } from \"../../utility/createNewWallet\";\r\nimport { handleTransactionInModalsApprove } from \"../../utility/handleTransactionInModalsApprove\";\r\nimport { getAcquisition } from \"../../utility/getAcquisition\";\r\nimport {\r\n  StyledStockLabel,\r\n  StyledTradeWrapper\r\n} from \"../layouts/Stock/stockStyles\";\r\nimport { SwitchButtons } from \"../layouts/Investments/InvestmentSwitcher/SwitchButtons/SwitchButtons\";\r\n\r\nconst MAX_TRANSACTION_AMOUNT = 20000;\r\n\r\nexport enum TransactionType {\r\n  sell = \"sell\",\r\n  buy = \"buy\"\r\n}\r\n\r\ninterface TradeContainerProps {\r\n  wallet: WalletI;\r\n  cryptos: FetchedCryptosI;\r\n  showModal: typeof showModal;\r\n}\r\n\r\nexport type InputValueType = {\r\n  [crypto: string]: string;\r\n};\r\n\r\nconst _TradeLogic = ({ wallet, cryptos, showModal }: TradeContainerProps) => {\r\n  const [transactionType, setTransactionType] = useState(TransactionType.buy);\r\n  const [inputValue, setInputValue] = useState<InputValueType>({});\r\n\r\n  const cryptoSymbol = Object.keys(inputValue)[0];\r\n  const value = Number(inputValue[cryptoSymbol]);\r\n\r\n  const price = cryptoSymbol ? cryptos[cryptoSymbol].PRICE : 0;\r\n\r\n  const { fee, cryptoAmount, usdAmount } = getAcquisition({\r\n    value,\r\n    price,\r\n    transactionType\r\n  });\r\n\r\n  const handleInputChange: HandleInputChangeType = event => {\r\n    const { name, value } = event.currentTarget;\r\n    if (value === \"\") return setInputValue({});\r\n\r\n    let error = false;\r\n    if (transactionType === TransactionType.buy) {\r\n      error = Number(value) > MAX_TRANSACTION_AMOUNT;\r\n    } else {\r\n      error = Number(value) * cryptos[name].PRICE > MAX_TRANSACTION_AMOUNT;\r\n    }\r\n\r\n    if (error) {\r\n      showModal({\r\n        modalType: MODAL_TYPES.ALERT,\r\n        modalProps: {\r\n          alertText: `Maximum transaction is ${MAX_TRANSACTION_AMOUNT} USD`\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    setInputValue({ [name]: value });\r\n  };\r\n\r\n  const handleTransaction = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const newWallet = createNewWallet({\r\n      wallet,\r\n      cryptoSymbol,\r\n      transactionType,\r\n      usdAmount,\r\n      cryptoAmount\r\n    });\r\n\r\n    // handle transaction in modals\r\n    const transactionApproved = handleTransactionInModalsApprove({\r\n      showModal,\r\n      newWallet,\r\n      cryptoAmount,\r\n      cryptoSymbol,\r\n      transactionType,\r\n      fee,\r\n      usdAmount\r\n    });\r\n\r\n    transactionApproved && setInputValue({});\r\n  };\r\n\r\n  const handleSwitch = (isBuyActive: boolean) => () => {\r\n    setTransactionType(\r\n      isBuyActive ? TransactionType.buy : TransactionType.sell\r\n    );\r\n    setInputValue({});\r\n  };\r\n\r\n  const getCryptosForSell = () => {\r\n    let cryptosForSell: CryptosI = {};\r\n    if (cryptos) {\r\n      for (let prop in wallet) {\r\n        if (prop !== \"USD\") cryptosForSell[prop] = cryptos[prop];\r\n      }\r\n    }\r\n    return cryptosForSell;\r\n  };\r\n\r\n  return (\r\n    <StyledTradeWrapper>\r\n      <StyledStockLabel>Stock</StyledStockLabel>\r\n      <SwitchButtons\r\n        leftActive={transactionType === TransactionType.buy}\r\n        leftText=\"Buy\"\r\n        rightText=\"Sell\"\r\n        changeActive={handleSwitch}\r\n      />\r\n      <CryptoList\r\n        cryptos={\r\n          transactionType === TransactionType.buy\r\n            ? cryptos\r\n            : getCryptosForSell()\r\n        }\r\n        transactionType={transactionType}\r\n        handleInputChange={handleInputChange}\r\n        inputValue={inputValue}\r\n        handleTransaction={handleTransaction}\r\n        fee={fee}\r\n        acqusition={\r\n          transactionType === TransactionType.buy ? cryptoAmount : usdAmount\r\n        }\r\n      />\r\n    </StyledTradeWrapper>\r\n  );\r\n};\r\n\r\nexport const TradeLogic = connect(\r\n  null,\r\n  { showModal, hideModal }\r\n)(_TradeLogic) as React.ReactType;\r\n","import { TransactionType } from \"../components/TradeLogic/TradeLogic\";\r\nimport { getCurrencyFormat, getCryptoFormat } from \"./numberFormats\";\r\n\r\nconst FEE_AMOUNT = 0.01;\r\ninterface GetAcquisitionProps {\r\n  value: number;\r\n  price: number;\r\n  transactionType: TransactionType;\r\n}\r\nexport const getAcquisition = ({\r\n  value,\r\n  price,\r\n  transactionType\r\n}: GetAcquisitionProps) => {\r\n  let fee = 0;\r\n  let cryptoAmount = 0;\r\n  let usdAmount = 0;\r\n  if (!value) return { fee, cryptoAmount, usdAmount };\r\n\r\n  if (transactionType === TransactionType.buy) {\r\n    fee = getCurrencyFormat(value * FEE_AMOUNT);\r\n    cryptoAmount = getCryptoFormat((value - fee) / price);\r\n    usdAmount = value;\r\n  } else {\r\n    fee = getCurrencyFormat(value * price * FEE_AMOUNT);\r\n    cryptoAmount = value;\r\n    usdAmount = getCurrencyFormat(value * price - fee);\r\n  }\r\n  return { fee, cryptoAmount, usdAmount };\r\n};\r\n","import { WalletI } from \"../redux/reducers/wallet\";\r\nimport { TransactionType } from \"../components/TradeLogic/TradeLogic\";\r\nimport { getCurrencyFormat, getCryptoFormat } from \"./numberFormats\";\r\n\r\ninterface CreateNewWalletProps {\r\n  wallet: WalletI;\r\n  cryptoSymbol: string;\r\n  transactionType: TransactionType;\r\n  usdAmount: number;\r\n  cryptoAmount: number;\r\n}\r\n\r\nexport const createNewWallet = ({\r\n  wallet,\r\n  cryptoSymbol,\r\n  transactionType,\r\n  usdAmount,\r\n  cryptoAmount\r\n}: CreateNewWalletProps) => {\r\n  const newWallet: WalletI = JSON.parse(JSON.stringify(wallet));\r\n\r\n  const usd = newWallet.USD || 0;\r\n  const crypto = newWallet[cryptoSymbol] || 0;\r\n  if (transactionType === TransactionType.buy) {\r\n    newWallet.USD = getCurrencyFormat(usd - usdAmount);\r\n    newWallet[cryptoSymbol] = getCryptoFormat(crypto + cryptoAmount);\r\n  } else {\r\n    newWallet.USD = getCurrencyFormat(usd + usdAmount);\r\n    newWallet[cryptoSymbol] = getCryptoFormat(crypto - cryptoAmount);\r\n\r\n    // remove crypto property from wallet when sold\r\n    if (!newWallet[cryptoSymbol]) delete newWallet[cryptoSymbol];\r\n  }\r\n  return newWallet;\r\n};\r\n","import { MODAL_TYPES } from \"../types/MODAL_TYPES\";\r\nimport { showModal } from \"../redux/actions/modalActions\";\r\nimport { WalletI } from \"../redux/reducers/wallet\";\r\nimport { TransactionType } from \"../components/TradeLogic/TradeLogic\";\r\n\r\ninterface handleTransactionInModalsApproveProps {\r\n  showModal: typeof showModal;\r\n  newWallet: WalletI;\r\n  cryptoAmount: number;\r\n  cryptoSymbol: string;\r\n  transactionType: TransactionType;\r\n  fee: number;\r\n  usdAmount: number;\r\n}\r\n\r\nexport const handleTransactionInModalsApprove = ({\r\n  showModal,\r\n  newWallet,\r\n  cryptoAmount,\r\n  cryptoSymbol,\r\n  transactionType,\r\n  fee,\r\n  usdAmount\r\n}: handleTransactionInModalsApproveProps) => {\r\n  if (newWallet.USD < 0) {\r\n    showModal({\r\n      modalType: MODAL_TYPES.ALERT,\r\n      modalProps: {\r\n        alertText: `You don't have enough money for this transaction.`\r\n      }\r\n    });\r\n  } else if (newWallet[cryptoSymbol] < 0) {\r\n    showModal({\r\n      modalType: MODAL_TYPES.ALERT,\r\n      modalProps: {\r\n        alertText: `You dont have ${cryptoAmount} ${cryptoSymbol} !`\r\n      }\r\n    });\r\n  } else {\r\n    showModal({\r\n      modalType: MODAL_TYPES.TRANSACTION,\r\n      modalProps: {\r\n        newWallet,\r\n        transactionType,\r\n        cryptoAmount,\r\n        fee,\r\n        usdAmount,\r\n        cryptoSymbol\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n};\r\n","import ETH from \"../../node_modules/cryptocurrency-icons/svg/color/eth.svg\";\r\nimport XRP from \"../../node_modules/cryptocurrency-icons/svg/color/xrp.svg\";\r\nimport LTC from \"../../node_modules/cryptocurrency-icons/svg/color/ltc.svg\";\r\nimport BCH from \"../../node_modules/cryptocurrency-icons/svg/color/bch.svg\";\r\nimport EOS from \"../../node_modules/cryptocurrency-icons/svg/color/eos.svg\";\r\nimport BNB from \"../../node_modules/cryptocurrency-icons/svg/color/bnb.svg\";\r\nimport BSV from \"../../node_modules/cryptocurrency-icons/svg/color/bsv.svg\";\r\nimport BTC from \"../../node_modules/cryptocurrency-icons/svg/color/btc.svg\";\r\nimport XLM from \"../../node_modules/cryptocurrency-icons/svg/color/xlm.svg\";\r\nimport ADA from \"../../node_modules/cryptocurrency-icons/svg/color/ada.svg\";\r\nimport TRX from \"../../node_modules/cryptocurrency-icons/svg/color/trx.svg\";\r\nimport XMR from \"../../node_modules/cryptocurrency-icons/svg/color/xmr.svg\";\r\nimport DASH from \"../../node_modules/cryptocurrency-icons/svg/color/dash.svg\";\r\nimport MIOTA from \"../../node_modules/cryptocurrency-icons/svg/color/miota.svg\";\r\nimport ONT from \"../../node_modules/cryptocurrency-icons/svg/color/ont.svg\";\r\nimport ETC from \"../../node_modules/cryptocurrency-icons/svg/color/etc.svg\";\r\nimport NEO from \"../../node_modules/cryptocurrency-icons/svg/color/neo.svg\";\r\nimport XTZ from \"../../node_modules/cryptocurrency-icons/svg/color/xtz.svg\";\r\nimport XEM from \"../../node_modules/cryptocurrency-icons/svg/color/xem.svg\";\r\nimport MKR from \"../../node_modules/cryptocurrency-icons/svg/color/mkr.svg\";\r\n\r\nexport interface CryptoIconI {\r\n  [key: string]: string;\r\n}\r\n\r\nexport const cryptoIcons = {\r\n  BTC,\r\n  ETH,\r\n  XRP,\r\n  LTC,\r\n  BCH,\r\n  EOS,\r\n  BNB,\r\n  BSV,\r\n  XLM,\r\n  ADA,\r\n  TRX,\r\n  XMR,\r\n  DASH,\r\n  MIOTA,\r\n  ONT,\r\n  ETC,\r\n  NEO,\r\n  XTZ,\r\n  XEM,\r\n  MKR\r\n};\r\n","export enum ROUTES {\r\n  CRYTPO_MASTER = \"/crypto-master\",\r\n  STOCK = \"/stock\",\r\n  RANK = \"/ranking\",\r\n  INVESTMENTS_PARAMS = \"/investments/:userName?\",\r\n  INVESTMENTS = \"/investments\",\r\n  ACCOUNT = \"/account\"\r\n}\r\n","const size = {\r\n  mobileS: \"320px\",\r\n  mobileM: \"375px\",\r\n  mobileL: \"425px\",\r\n  tablet: \"768px\",\r\n  laptop: \"1024px\",\r\n  laptopL: \"1440px\",\r\n  desktop: \"2560px\"\r\n};\r\n\r\nexport const device = {\r\n  mobileS: `(max-width: ${size.mobileS})`,\r\n  mobileM: `(max-width: ${size.mobileM})`,\r\n  mobileL: `(max-width: ${size.mobileL})`,\r\n  tablet: `(max-width: ${size.tablet})`,\r\n  laptop: `(max-width: ${size.laptop})`,\r\n  laptopL: `(max-width: ${size.laptopL})`,\r\n  desktop: `(max-width: ${size.desktop})`,\r\n  desktopL: `(max-width: ${size.desktop})`\r\n};\r\n","export enum CRYPTO_SYMBOLS {\r\n  BTC = \"Bitcoin\",\r\n  ETH = \"Ethereum\",\r\n  XRP = \"XRP\",\r\n  LTC = \"Litecoin\",\r\n  BCH = \"Bitcoin Cash\",\r\n  EOS = \"EOS\",\r\n  BNB = \"Binance Coin\",\r\n  BSV = \"Bitcoin SV\",\r\n  XLM = \"Stellar\",\r\n  ADA = \"Cardano\",\r\n  TRX = \"TRON\",\r\n  XMR = \"Monero\",\r\n  DASH = \"Dash\",\r\n  MIOTA = \"IOTA\",\r\n  ONT = \"Ontology\",\r\n  ETC = \"ETH Classic\",\r\n  NEO = \"NEO\",\r\n  XTZ = \"Tezos\",\r\n  XEM = \"NEM\",\r\n  MKR = \"Maker\"\r\n}\r\n","import {\r\n  ShowModalAction,\r\n  HideModalAction\r\n} from \"../redux/actions/modalActions\";\r\nimport { ISetIsLogInAction } from \"../redux/actions/setIsLogIn\";\r\nimport { FetchCryptosAction } from \"../redux/actions/fetchCryptosAction\";\r\nimport { AddUSerNamesAction } from \"../redux/actions/addUserNames\";\r\nimport { SetWalletAction } from \"../redux/actions/setWallet\";\r\n\r\nexport enum ACTION_TYPES {\r\n  SHOW_MODAL = \"showModal\",\r\n  HIDE_MODAL = \"hideModal\",\r\n  SET_LOG_IN = \"setLogIn\",\r\n  FETCH_CRYPTOS = \"fetchCryptos\",\r\n  ADD_USER_NAMES = \"addUserNames\",\r\n  SET_WALLET = \"setWallet\"\r\n}\r\n\r\nexport type ActionType =\r\n  | ShowModalAction\r\n  | HideModalAction\r\n  | ISetIsLogInAction\r\n  | FetchCryptosAction\r\n  | AddUSerNamesAction\r\n  | SetWalletAction;\r\n","export interface ThemeI {\r\n  color: {\r\n    green: ColorType.green;\r\n    red: ColorType.red;\r\n    navyBlue: ColorType.navyBlue;\r\n  };\r\n}\r\n\r\nexport enum ColorType {\r\n  green = \"#1AAF54\",\r\n  red = \"#FC0D1B\",\r\n  navyBlue = \"#05386b\"\r\n}\r\n\r\nexport const theme: ThemeI = {\r\n  color: {\r\n    green: ColorType.green,\r\n    red: ColorType.red,\r\n    navyBlue: ColorType.navyBlue\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nexport const renderAlternative = <A extends object>(\r\n  Alternative: React.ComponentType<A>\r\n) => <P extends object>(Component: React.ComponentType<P>) => {\r\n  const RenderAlternative = ({ renderAlternative, ...otherProps }: any) => {\r\n    return renderAlternative ? (\r\n      <Alternative {...(otherProps as A)} />\r\n    ) : (\r\n      <Component {...(otherProps as P)} />\r\n    );\r\n  };\r\n\r\n  return RenderAlternative;\r\n};\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Loader/Loader.tsx","../node_modules/cryptocurrency-icons/svg/color/usd.svg","components/Wallet/withWallet.tsx","components/Wallet/Wallet.tsx","redux/actions/setWallet.ts","components/layouts/Stock/StockContainer.ts","components/layouts/Stock/Stock.tsx"],"names":["Loader","module","exports","Component","Wallet","wallet","cryptoItems","usdItem","Object","keys","map","crypto","key","style","width","height","src","cryptoIcons","alt","CRYPTO_SYMBOLS","usdIcon","USD","setWallet","type","ACTION_TYPES","SET_WALLET","payload","StockOrAlternative","renderAlternative","cryptos","TradeLogic","_StockContainer","connect","isLoggedIn","withWallet","compose","state","withFirebase","firebase","otherProps","userId","getUserId","useEffect","walletDb","on","snapshot","newWallet","val","off"],"mappings":"0HAAA,sDAEaA,EAAS,WACpB,OAAO,0C,oBCHTC,EAAOC,QAAU,IAA0B,iC,4CCmBzCC,E,iECJWC,EAAS,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OACnBC,EAAc,KACdC,EAAU,KAEVF,IAIFC,EAHmBE,OAAOC,KAAKJ,GAGNK,KAAI,SAAAC,GAC3B,MAAe,QAAXA,EAAyB,KAG3B,wBAAIC,IAAKD,GACP,yBACEE,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAKC,IAAYN,GACjBO,IAAKP,IAEP,8BAAOQ,IAAeR,GAAtB,KACA,8BAAON,EAAOM,QAKpBJ,EACE,4BACE,yBACEM,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAKI,IACLF,IAAI,QAEN,sCACA,8BAAOb,EAAOgB,OAIpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,eACA,4BACGd,EACAD,K,wDChDIgB,EAAY,SAACjB,GAAD,MAA0C,CACjEkB,KAAMC,IAAaC,WACnBC,QAASrB,ICDLsB,EAAqBC,YAAkB5B,IAAlB4B,ECGN,SAAC,GAAqC,IAAnCvB,EAAkC,EAAlCA,OAAQwB,EAA0B,EAA1BA,QAC9B,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQxB,OAAQA,IAChB,kBAACyB,EAAA,EAAD,CAAYzB,OAAQA,EAAQwB,QAASA,QDKrCE,EAAkBC,aAVA,SAAC,EAAD,GAGlB,IAFFC,EAEC,EAFDA,WAAYJ,EAEX,EAFWA,QAId,MAAO,CACLD,mBAHC,EADDvB,SAEoCwB,GAA0B,OAAfI,EAG/CJ,aAGoBG,CAAyBL,GAElCO,WHJb/B,EGIwB4B,EH6BjBI,kBACLH,aALsB,SAACI,GAAD,MAAoB,CAC1C/B,OAAQ+B,EAAM/B,UAMZ,CAAEiB,cAEJe,IALKF,EA/BY,SAAC,GAKG,IAJrB9B,EAIoB,EAJpBA,OACAiB,EAGoB,EAHpBA,UACAgB,EAEoB,EAFpBA,SACGC,EACiB,iDACdC,EAASF,EAASG,YAkBxB,OAhBAC,qBAAU,WACR,GAAIF,EASF,OARAF,EACGK,SAASH,GACTI,GAAG,SAAS,SAACC,GACZ,IAAMC,EAAYD,EAASE,MACvBD,GACFxB,EAAUwB,MAGT,WACLR,EAASK,SAASH,GAAQQ,SAG7B,CAACV,EAAUE,EAAQlB,IAEf,kBAACnB,EAAD,eAAWE,OAAQA,GAAakC","file":"static/js/7.6c4e2d1c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Loader = () => {\r\n  return <div>Loading</div>;\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/usd.67442b38.svg\";","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { withFirebase } from \"../../firebase/withFirebase\";\r\nimport { Firebase } from \"../../firebase/Firebase\";\r\nimport { setWallet } from \"../../redux/actions/setWallet\";\r\nimport { WalletType } from \"../../redux/reducers/wallet\";\r\nimport { IStore } from \"../../redux/reducers\";\r\n\r\ninterface withWalletProps {\r\n  wallet: WalletType;\r\n}\r\ninterface WithWallet {\r\n  setWallet: typeof setWallet;\r\n  firebase: Firebase;\r\n}\r\n\r\nexport const withWallet = <P extends withWalletProps>(\r\n  Component: React.ComponentType<P>\r\n) => {\r\n  const WithWallet = ({\r\n    wallet,\r\n    setWallet,\r\n    firebase,\r\n    ...otherProps\r\n  }: P & WithWallet) => {\r\n    const userId = firebase.getUserId();\r\n\r\n    useEffect(() => {\r\n      if (userId) {\r\n        firebase\r\n          .walletDb(userId)\r\n          .on(\"value\", (snapshot: firebase.database.DataSnapshot) => {\r\n            const newWallet = snapshot.val();\r\n            if (newWallet) {\r\n              setWallet(newWallet);\r\n            }\r\n          });\r\n        return () => {\r\n          firebase.walletDb(userId).off();\r\n        };\r\n      }\r\n    }, [firebase, userId, setWallet]);\r\n\r\n    return <Component wallet={wallet} {...(otherProps as any)} />;\r\n  };\r\n\r\n  const mapStateToProps = (state: IStore) => ({\r\n    wallet: state.wallet\r\n  });\r\n\r\n  return compose(\r\n    connect(\r\n      mapStateToProps,\r\n      { setWallet }\r\n    ),\r\n    withFirebase\r\n  )(WithWallet) as React.ComponentType;\r\n};\r\n","import React from \"react\";\r\nimport usdIcon from \"../../../node_modules/cryptocurrency-icons/svg/color/usd.svg\";\r\n\r\nimport { CRYPTO_SYMBOLS } from \"../../types/CRYPTO_SYMBOLS\";\r\nimport { cryptoIcons } from \"../../constants/cryptoIcons\";\r\nimport { WalletType } from \"../../redux/reducers/wallet\";\r\nimport {\r\n  StyledStockLabel,\r\n  StyledWalletWrapper\r\n} from \"../layouts/Stock/stockStyles\";\r\n\r\ninterface WalletProps {\r\n  wallet: WalletType;\r\n}\r\n\r\nexport const Wallet = ({ wallet }: WalletProps) => {\r\n  let cryptoItems = null;\r\n  let usdItem = null;\r\n\r\n  if (wallet) {\r\n    const walletKeys = Object.keys(wallet) as Array<\r\n      keyof typeof CRYPTO_SYMBOLS | \"USD\"\r\n    >;\r\n    cryptoItems = walletKeys.map(crypto => {\r\n      if (crypto === \"USD\") return null;\r\n\r\n      return (\r\n        <li key={crypto}>\r\n          <img\r\n            style={{ width: \"30px\", height: \"30px\" }}\r\n            src={cryptoIcons[crypto]}\r\n            alt={crypto}\r\n          ></img>\r\n          <span>{CRYPTO_SYMBOLS[crypto]} </span>\r\n          <span>{wallet[crypto]}</span>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    usdItem = (\r\n      <li>\r\n        <img\r\n          style={{ width: \"30px\", height: \"30px\" }}\r\n          src={usdIcon}\r\n          alt=\"usd\"\r\n        ></img>\r\n        <span>USD </span>\r\n        <span>{wallet.USD}</span>\r\n      </li>\r\n    );\r\n  }\r\n  return (\r\n    <StyledWalletWrapper>\r\n      <StyledStockLabel>Wallet</StyledStockLabel>\r\n      <ul>\r\n        {usdItem}\r\n        {cryptoItems}\r\n      </ul>\r\n    </StyledWalletWrapper>\r\n  );\r\n};\r\n","import { ACTION_TYPES } from \"../../types/ACTION_TYPES\";\r\nimport { WalletType } from \"../reducers/wallet\";\r\n\r\nexport interface SetWalletAction {\r\n  type: ACTION_TYPES.SET_WALLET;\r\n  payload: WalletType;\r\n}\r\n\r\nexport const setWallet = (wallet: WalletType): SetWalletAction => ({\r\n  type: ACTION_TYPES.SET_WALLET,\r\n  payload: wallet\r\n});\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { Stock } from \"./Stock\";\r\nimport { renderAlternative } from \"../../../routeConditions/renderAlternative\";\r\nimport { Loader } from \"../../Loader/Loader\";\r\nimport { StockProps } from \"./Stock\";\r\nimport { IStore } from \"../../../redux/reducers\";\r\nimport { withWallet } from \"../../Wallet/withWallet\";\r\n\r\nconst StockOrAlternative = renderAlternative(Loader)(Stock);\r\n\r\nconst mapStateToProps = (\r\n  { isLoggedIn, cryptos }: IStore,\r\n  { wallet }: StockProps\r\n) => {\r\n  const renderAlternative = !wallet || !cryptos || isLoggedIn === null;\r\n  return {\r\n    renderAlternative,\r\n    cryptos\r\n  };\r\n};\r\nconst _StockContainer = connect(mapStateToProps)(StockOrAlternative);\r\n\r\nexport default withWallet(_StockContainer);\r\n","import React from \"react\";\r\n\r\nimport { Wallet } from \"../../Wallet/Wallet\";\r\nimport { TradeLogic } from \"../../TradeLogic/TradeLogic\";\r\nimport { WalletType } from \"../../../redux/reducers/wallet\";\r\nimport { FetchedCryptosI } from \"../../../redux/reducers/cryptos\";\r\nimport { StyledStockWrapper } from \"./stockStyles\";\r\n\r\nexport interface StockProps {\r\n  wallet: WalletType;\r\n  cryptos: FetchedCryptosI;\r\n}\r\nexport const Stock = ({ wallet, cryptos }: StockProps) => {\r\n  return (\r\n    <StyledStockWrapper>\r\n      <Wallet wallet={wallet} />\r\n      <TradeLogic wallet={wallet} cryptos={cryptos} />\r\n    </StyledStockWrapper>\r\n  );\r\n};\r\n"],"sourceRoot":""}
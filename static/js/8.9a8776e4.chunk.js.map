{"version":3,"sources":["components/Loader/Loader.tsx","components/Info/Info.tsx","components/layouts/Investments/InvestmentIconsList/InvestmentIconsList.tsx","components/layouts/Investments/Investments.tsx","components/layouts/Investments/InvestmentList/InvestmentList.tsx","components/layouts/Investments/InvestmentList/CurrentInvestmentItem/CurrentInvestmentItem.tsx","components/layouts/Investments/InvestmentList/CompletedInvestmentItem/CompletedInvestmentItem.tsx","components/layouts/Investments/InvestmentSwitcher/InvestmentSwitcher.tsx","components/layouts/Investments/InvestmentsDataHandler.tsx","customHooks/useInvestmentsDb.ts"],"names":["Loader","Info","infoText","InvestmentIconsList","cryptoSymbols","map","cryptoSymbol","key","to","spy","smooth","src","cryptoIcons","alt","Investments","investments","renderInvestmentsList","cryptoSymbolsList","Object","keys","InvestmentList","renderInvestmentItem","indiviudalTransactions","id","CRYPTO_SYMBOLS","investmentTime","investment","Number","CurrentInvestmentItem","cryptoAmount","buyPrice","CompletedInvestmentItem","buyTime","sellTime","sellPrice","sellCryptoAmount","roi","InvestmentSwitcher","userNameParams","useState","showCurrent","setShowCurrent","SwitchButtons","leftActive","changeActive","leftText","rightText","current","props","completed","compose","connect","state","userNames","withFirebase","firebase","match","params","userName","searchUserId","userId","setInvestments","useEffect","investmentsDb","on","snapShot","val","off","useInvestmentsDb","getUserId","length","undefined"],"mappings":"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","file":"static/js/8.9a8776e4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Loader = () => {\r\n  return <div>Loading</div>;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Info = ({ infoText }: { infoText: string }) => <h1>{infoText}</h1>;\r\n","import React from \"react\";\r\nimport { Link } from \"react-scroll\";\r\n\r\nimport { CRYPTO_SYMBOLS } from \"../../../../types/CRYPTO_SYMBOLS\";\r\nimport { cryptoIcons } from \"../../../../constants/cryptoIcons\";\r\n\r\ninterface InvestmentIconsListProps {\r\n  cryptoSymbols: Array<keyof typeof CRYPTO_SYMBOLS>;\r\n}\r\n\r\nexport const InvestmentIconsList = ({\r\n  cryptoSymbols\r\n}: InvestmentIconsListProps) => {\r\n  const renderIconsList = () =>\r\n    cryptoSymbols.map(cryptoSymbol => {\r\n      return (\r\n        <li key={cryptoSymbol}>\r\n          <Link to={cryptoSymbol} spy={true} smooth={true}>\r\n            <img\r\n              src={cryptoIcons[cryptoSymbol]}\r\n              alt={cryptoIcons[cryptoSymbol]}\r\n            ></img>\r\n          </Link>\r\n        </li>\r\n      );\r\n    });\r\n\r\n  return <ul>{renderIconsList()}</ul>;\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-scroll\";\r\n\r\nimport { InvestmentIconsList } from \"./InvestmentIconsList/InvestmentIconsList\";\r\nimport { CRYPTO_SYMBOLS } from \"../../../types/CRYPTO_SYMBOLS\";\r\nimport {\r\n  InvestmentsCurrentI,\r\n  InvestmentsCompletedI\r\n} from \"../../../types/InvestmentsInterfaces\";\r\n\r\ninterface InvestmentsProps {\r\n  investments: InvestmentsCurrentI | InvestmentsCompletedI;\r\n  renderInvestmentsList: () => JSX.Element;\r\n}\r\n\r\nexport const Investments = ({\r\n  investments,\r\n  renderInvestmentsList\r\n}: InvestmentsProps) => {\r\n  const cryptoSymbolsList = Object.keys(investments) as Array<\r\n    keyof typeof CRYPTO_SYMBOLS\r\n  >;\r\n\r\n  return (\r\n    <div>\r\n      <InvestmentIconsList cryptoSymbols={cryptoSymbolsList} />\r\n      <Link to=\"investments\" spy={true} smooth={true}>\r\n        TOP\r\n      </Link>\r\n      {renderInvestmentsList()}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { CRYPTO_SYMBOLS } from \"../../../../types/CRYPTO_SYMBOLS\";\r\nimport { cryptoIcons } from \"../../../../constants/cryptoIcons\";\r\nimport {\r\n  InvestmentsCurrentI,\r\n  InvestmentsCompletedI\r\n} from \"../../../../types/InvestmentsInterfaces\";\r\n\r\ninterface InvestmentListProps {\r\n  investments: InvestmentsCurrentI | InvestmentsCompletedI;\r\n  renderInvestmentItem: any;\r\n}\r\nexport const InvestmentList = ({\r\n  investments,\r\n  renderInvestmentItem\r\n}: InvestmentListProps) => {\r\n  const cryptoSymbolsList = Object.keys(investments) as Array<\r\n    keyof typeof CRYPTO_SYMBOLS\r\n  >;\r\n\r\n  // Render list of crypto transaction.\r\n  const renderCryptoTransactionsList = () =>\r\n    cryptoSymbolsList.map(cryptoSymbol => {\r\n      const indiviudalTransactions = Object.keys(investments[cryptoSymbol]);\r\n\r\n      // Each crypto has its individual list of transaction times\r\n      const renderTransactonsOfIndividualCrypto = () =>\r\n        indiviudalTransactions.map(investmentTime => {\r\n          const investment = investments[cryptoSymbol][Number(investmentTime)];\r\n          return (\r\n            <li key={investmentTime}>\r\n              {renderInvestmentItem({\r\n                investment,\r\n                cryptoSymbol,\r\n                investmentTime\r\n              })}\r\n            </li>\r\n          );\r\n        });\r\n\r\n      return (\r\n        <li id={cryptoSymbol} key={cryptoSymbol}>\r\n          <img src={cryptoIcons[cryptoSymbol]} alt={cryptoSymbol}></img>\r\n          <span>{CRYPTO_SYMBOLS[cryptoSymbol]}</span>\r\n          <ul>{renderTransactonsOfIndividualCrypto()}</ul>\r\n        </li>\r\n      );\r\n    });\r\n\r\n  return <ul>{renderCryptoTransactionsList()}</ul>;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { CurrentI } from \"../../../../../types/InvestmentsInterfaces\";\r\nimport { CRYPTO_SYMBOLS } from \"../../../../../types/CRYPTO_SYMBOLS\";\r\n\r\nexport interface CurrentInvestmentItemProps {\r\n  cryptoSymbol: keyof typeof CRYPTO_SYMBOLS;\r\n  investmentTime: string;\r\n  investment: CurrentI;\r\n}\r\n\r\nexport const CurrentInvestmentItem = ({\r\n  investmentTime,\r\n  investment,\r\n  cryptoSymbol\r\n}: CurrentInvestmentItemProps) => {\r\n  return (\r\n    <>\r\n      <span>{investmentTime} </span>\r\n      <span>{`${investment.cryptoAmount} ${cryptoSymbol}`} </span>\r\n      <span>{`for ${investment.buyPrice} usd`}</span>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { CompletedI } from \"../../../../../types/InvestmentsInterfaces\";\r\nimport { CRYPTO_SYMBOLS } from \"../../../../../types/CRYPTO_SYMBOLS\";\r\n\r\nexport interface CompletedInvestmentItemProps {\r\n  cryptoSymbol: keyof typeof CRYPTO_SYMBOLS;\r\n  investmentTime: string;\r\n  investment: CompletedI;\r\n}\r\n\r\nexport const CompletedInvestmentItem = ({\r\n  investmentTime,\r\n  investment,\r\n  cryptoSymbol\r\n}: CompletedInvestmentItemProps) => {\r\n  return (\r\n    <>\r\n      <p>{investment.buyTime}</p>\r\n      <p>{investment.buyPrice}</p>\r\n      <p>{investment.sellTime}</p>\r\n      <p>{investment.sellPrice}</p>\r\n      <p>{investment.sellCryptoAmount}</p>\r\n      <p>{investment.roi}</p>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Info } from \"../../../Info/Info\";\r\nimport { InvestmentsI } from \"../../../../types/InvestmentsInterfaces\";\r\nimport { Investments } from \"../Investments\";\r\nimport { InvestmentList } from \"../InvestmentList/InvestmentList\";\r\nimport { SwitchButtons } from \"./SwitchButtons/SwitchButtons\";\r\nimport {\r\n  CurrentInvestmentItem,\r\n  CurrentInvestmentItemProps\r\n} from \"../InvestmentList/CurrentInvestmentItem/CurrentInvestmentItem\";\r\nimport {\r\n  CompletedInvestmentItem,\r\n  CompletedInvestmentItemProps\r\n} from \"../InvestmentList/CompletedInvestmentItem/CompletedInvestmentItem\";\r\n\r\ninterface InvestmentSwitcherProps {\r\n  investments: InvestmentsI;\r\n  userNameParams?: string;\r\n}\r\n\r\nexport const InvestmentSwitcher = ({\r\n  investments,\r\n  userNameParams\r\n}: InvestmentSwitcherProps) => {\r\n  const [showCurrent, setShowCurrent] = useState(true);\r\n\r\n  const handleSetShow = (showCurrent: boolean) => () => {\r\n    setShowCurrent(showCurrent);\r\n  };\r\n\r\n  const renderInvestments = () => {\r\n    // render current investments\r\n    if (showCurrent) {\r\n      return (\r\n        <Investments\r\n          investments={investments.current}\r\n          renderInvestmentsList={() => (\r\n            <InvestmentList\r\n              investments={investments.current}\r\n              renderInvestmentItem={(props: CurrentInvestmentItemProps) => (\r\n                <CurrentInvestmentItem {...props} />\r\n              )}\r\n            />\r\n          )}\r\n        />\r\n      );\r\n    }\r\n\r\n    // render info if no completed investments\r\n    if (!(\"completed\" in investments)) {\r\n      return <Info infoText={`No completed investments so far`} />;\r\n    }\r\n\r\n    // render completed investments\r\n    return (\r\n      <Investments\r\n        investments={investments.completed}\r\n        renderInvestmentsList={() => (\r\n          <InvestmentList\r\n            investments={investments.completed}\r\n            renderInvestmentItem={(props: CompletedInvestmentItemProps) => (\r\n              <CompletedInvestmentItem {...props} />\r\n            )}\r\n          />\r\n        )}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div id=\"investments\">\r\n      {userNameParams ? <Info infoText={userNameParams} /> : null}\r\n      <SwitchButtons\r\n        leftActive={showCurrent}\r\n        changeActive={handleSetShow}\r\n        leftText=\"Current\"\r\n        rightText=\"Completed\"\r\n      />\r\n      {renderInvestments()}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { match } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { Info } from \"../../Info/Info\";\r\nimport { IStore } from \"../../../redux/reducers\";\r\nimport { useInvestmentsDb } from \"../../../customHooks/useInvestmentsDb\";\r\nimport { UserNamesI } from \"../../../redux/reducers/userNames\";\r\nimport { Firebase } from \"../../../firebase/Firebase\";\r\nimport { withFirebase } from \"../../../firebase/withFirebase\";\r\nimport { Loader } from \"../../Loader/Loader\";\r\nimport { InvestmentSwitcher } from \"./InvestmentSwitcher/InvestmentSwitcher\";\r\n\r\ninterface InvestmentsDataHandlerProps {\r\n  firebase: Firebase;\r\n  match: match<{ userName: string | undefined }>;\r\n  userNames: UserNamesI;\r\n}\r\nconst _InvestmentsDataHandler = ({\r\n  firebase,\r\n  match,\r\n  userNames\r\n}: InvestmentsDataHandlerProps) => {\r\n  const userNameParams = match.params.userName;\r\n  let searchUserId = null;\r\n\r\n  if (userNameParams) {\r\n    searchUserId = userNames[userNameParams];\r\n  }\r\n\r\n  const userId = searchUserId || firebase.getUserId();\r\n  const investments = useInvestmentsDb(userId, firebase);\r\n\r\n  // Investments have already been fetched and are empty\r\n  if (investments === null) {\r\n    return (\r\n      <Info\r\n        infoText={\r\n          userNameParams\r\n            ? `User ${userNameParams} has no investments`\r\n            : \"You don't have any investments\"\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  // Loader when data haven't been loaded yet\r\n  if (!Object.keys(userNames).length || !(\"current\" in investments)) {\r\n    return <Loader />;\r\n  }\r\n\r\n  // when user pass manually unexsiting userName\r\n  if (searchUserId === undefined) {\r\n    return <Info infoText={`User ${userNameParams} doesn't exist`} />;\r\n  }\r\n\r\n  return (\r\n    <InvestmentSwitcher\r\n      investments={investments}\r\n      userNameParams={userNameParams}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: IStore) => ({\r\n  userNames: state.userNames\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps),\r\n  withFirebase\r\n)(_InvestmentsDataHandler) as React.FC;\r\n","import { useState, useEffect } from \"react\";\r\nimport { InvestmentsI } from \"../types/InvestmentsInterfaces\";\r\nimport { Firebase } from \"../firebase/Firebase\";\r\n\r\nexport const useInvestmentsDb = (\r\n  userId: string | undefined,\r\n  firebase: Firebase\r\n): InvestmentsI | null | {} => {\r\n  const [investments, setInvestments] = useState<InvestmentsI | null | {}>({});\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      firebase.investmentsDb(userId).on(\"value\", snapShot => {\r\n        setInvestments(snapShot.val());\r\n      });\r\n      return () => {\r\n        firebase.investmentsDb(userId).off();\r\n      };\r\n    }\r\n  }, [userId, firebase]);\r\n\r\n  return investments;\r\n};\r\n"],"sourceRoot":""}